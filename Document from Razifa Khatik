{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "509678b3-95bc-4ed6-8aa6-22b34617105c",
   "metadata": {},
   "source": [
    "# import library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b27aa424-a344-4043-805a-e6a9b7e73f60",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import os\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ebf818-7290-4cd4-b199-fbfa7757236f",
   "metadata": {},
   "source": [
    "# change the directory "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "99b3d854-585f-4a17-8f87-da3dc59b64e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ritz</td>\n",
       "      <td>2014</td>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sx4</td>\n",
       "      <td>2013</td>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ciaz</td>\n",
       "      <td>2017</td>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>wagon r</td>\n",
       "      <td>2011</td>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>swift</td>\n",
       "      <td>2014</td>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>city</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.50</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>brio</td>\n",
       "      <td>2015</td>\n",
       "      <td>4.00</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>city</td>\n",
       "      <td>2009</td>\n",
       "      <td>3.35</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>city</td>\n",
       "      <td>2017</td>\n",
       "      <td>11.50</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>brio</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Car_Name  Year  Selling_Price  Present_Price  Driven_kms Fuel_Type  \\\n",
       "0       ritz  2014           3.35           5.59       27000    Petrol   \n",
       "1        sx4  2013           4.75           9.54       43000    Diesel   \n",
       "2       ciaz  2017           7.25           9.85        6900    Petrol   \n",
       "3    wagon r  2011           2.85           4.15        5200    Petrol   \n",
       "4      swift  2014           4.60           6.87       42450    Diesel   \n",
       "..       ...   ...            ...            ...         ...       ...   \n",
       "296     city  2016           9.50          11.60       33988    Diesel   \n",
       "297     brio  2015           4.00           5.90       60000    Petrol   \n",
       "298     city  2009           3.35          11.00       87934    Petrol   \n",
       "299     city  2017          11.50          12.50        9000    Diesel   \n",
       "300     brio  2016           5.30           5.90        5464    Petrol   \n",
       "\n",
       "    Selling_type Transmission  Owner  \n",
       "0         Dealer       Manual      0  \n",
       "1         Dealer       Manual      0  \n",
       "2         Dealer       Manual      0  \n",
       "3         Dealer       Manual      0  \n",
       "4         Dealer       Manual      0  \n",
       "..           ...          ...    ...  \n",
       "296       Dealer       Manual      0  \n",
       "297       Dealer       Manual      0  \n",
       "298       Dealer       Manual      0  \n",
       "299       Dealer       Manual      0  \n",
       "300       Dealer       Manual      0  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.chdir(\"C:\\\\Users\\\\DELL\\\\Desktop\\\\razifa\")\n",
    "df = pd.read_csv(\"C:\\\\Users\\\\DELL\\\\Desktop\\\\razifa\\\\cars data\")\n",
    "df   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "213ca59f-17f5-4d66-8549-7922c8be6a1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ritz</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sx4</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ciaz</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>wagon r</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>swift</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>city</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>brio</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>city</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>city</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>brio</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Car_Name  Year  Present_Price  Driven_kms Fuel_Type Selling_type  \\\n",
       "0       ritz  2014           5.59       27000    Petrol       Dealer   \n",
       "1        sx4  2013           9.54       43000    Diesel       Dealer   \n",
       "2       ciaz  2017           9.85        6900    Petrol       Dealer   \n",
       "3    wagon r  2011           4.15        5200    Petrol       Dealer   \n",
       "4      swift  2014           6.87       42450    Diesel       Dealer   \n",
       "..       ...   ...            ...         ...       ...          ...   \n",
       "296     city  2016          11.60       33988    Diesel       Dealer   \n",
       "297     brio  2015           5.90       60000    Petrol       Dealer   \n",
       "298     city  2009          11.00       87934    Petrol       Dealer   \n",
       "299     city  2017          12.50        9000    Diesel       Dealer   \n",
       "300     brio  2016           5.90        5464    Petrol       Dealer   \n",
       "\n",
       "    Transmission  Owner  Selling_Price  \n",
       "0         Manual      0           3.35  \n",
       "1         Manual      0           4.75  \n",
       "2         Manual      0           7.25  \n",
       "3         Manual      0           2.85  \n",
       "4         Manual      0           4.60  \n",
       "..           ...    ...            ...  \n",
       "296       Manual      0           9.50  \n",
       "297       Manual      0           4.00  \n",
       "298       Manual      0           3.35  \n",
       "299       Manual      0          11.50  \n",
       "300       Manual      0           5.30  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# formatting the data\n",
    "cols=df.columns.tolist()\n",
    "cols.remove(\"Selling_Price\")\n",
    "owner=cols.index(\"Owner\")\n",
    "cols.insert(owner + 1,\"Selling_Price\")\n",
    "dff=df[cols]\n",
    "dff"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7234d8af-3456-4e29-b99a-aff2d94378c6",
   "metadata": {},
   "source": [
    "# label encoding on fuel type, car name, selling time, transmission columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67a434b1-90bc-4ab4-a108-05e8472aaf3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Car_Name         0\n",
       "Year             0\n",
       "Present_Price    0\n",
       "Driven_kms       0\n",
       "Fuel_Type        0\n",
       "Selling_type     0\n",
       "Transmission     0\n",
       "Owner            0\n",
       "Selling_Price    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "dff.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7687c4d0-9618-40bb-9b8d-c0e8de7a950f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 301 entries, 0 to 300\n",
      "Data columns (total 9 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Car_Name       301 non-null    object \n",
      " 1   Year           301 non-null    int64  \n",
      " 2   Present_Price  301 non-null    float64\n",
      " 3   Driven_kms     301 non-null    int64  \n",
      " 4   Fuel_Type      301 non-null    object \n",
      " 5   Selling_type   301 non-null    object \n",
      " 6   Transmission   301 non-null    object \n",
      " 7   Owner          301 non-null    int64  \n",
      " 8   Selling_Price  301 non-null    float64\n",
      "dtypes: float64(2), int64(3), object(4)\n",
      "memory usage: 21.3+ KB\n"
     ]
    }
   ],
   "source": [
    "dff.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5876f85e-3cac-4dfd-917f-9b13ac04ffea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([90, 93, 68, 96, 92, 95, 68, 91, 68, 68, 62, 68, 68, 76, 73, 76, 76,\n",
       "       76, 96, 93, 63, 85, 93, 63, 96, 92, 92, 92, 63, 68, 90, 90, 92, 76,\n",
       "       73, 93, 73,  0, 63, 93, 65, 63, 93, 73, 89, 68, 90, 96, 76, 68, 81,\n",
       "       81, 86, 81, 86, 71, 77, 71, 78, 81, 71, 77, 81, 81, 81, 80, 86, 81,\n",
       "       71, 71, 80, 71, 71, 80, 77, 78, 71, 70, 71, 81, 71, 79, 86, 86, 86,\n",
       "       67, 88, 71, 80, 78, 71, 86, 86, 81, 71, 71, 86, 71, 71, 81, 49, 56,\n",
       "       42, 11, 46, 43, 40, 48, 48, 46, 42, 48, 41, 44, 46, 46, 46, 49, 46,\n",
       "       49, 17, 48, 45, 46, 47, 47,  6,  4, 32, 60, 32, 58,  6,  6, 51, 14,\n",
       "       37, 20, 32,  7, 37,  5, 57, 57, 12, 51, 20, 60, 15, 15, 52, 26, 16,\n",
       "       16, 61, 31, 54, 60, 38, 31,  8, 52, 16,  7, 28,  1, 25, 51, 34, 28,\n",
       "       59, 25, 13,  2, 35, 22, 39, 30, 53, 39, 23, 27, 33,  9, 14, 50, 55,\n",
       "       36, 21, 29, 14, 10, 24, 19, 18,  3,  1, 36, 10, 33, 14, 84, 82, 83,\n",
       "       75, 82, 97, 82, 84, 82, 83, 74, 72, 84, 82, 94, 75, 75, 94, 94, 75,\n",
       "       84, 84, 94, 94, 83, 82, 83, 94, 84, 94, 94, 74, 82, 82, 94, 75, 72,\n",
       "       94, 75, 94, 97, 97, 84, 94, 94, 84, 94, 83, 84, 72, 69, 66, 69, 69,\n",
       "       66, 69, 69, 69, 64, 69, 66, 64, 87, 64, 87, 64, 69, 66, 69, 69, 69,\n",
       "       69, 87, 66, 69, 69, 69, 87, 69, 66, 69, 69, 69, 66, 87, 87, 64, 69,\n",
       "       69, 64, 66, 87, 69, 64, 69, 69, 66, 69, 69, 66])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_name_l=LabelEncoder()\n",
    "car_name_l.fit_transform(dff[\"Car_Name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "054958bd-f91f-45da-9947-0c649a3f3ddb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms Fuel_Type Selling_type  \\\n",
       "0          90  2014           5.59       27000    Petrol       Dealer   \n",
       "1          93  2013           9.54       43000    Diesel       Dealer   \n",
       "2          68  2017           9.85        6900    Petrol       Dealer   \n",
       "3          96  2011           4.15        5200    Petrol       Dealer   \n",
       "4          92  2014           6.87       42450    Diesel       Dealer   \n",
       "..        ...   ...            ...         ...       ...          ...   \n",
       "296        69  2016          11.60       33988    Diesel       Dealer   \n",
       "297        66  2015           5.90       60000    Petrol       Dealer   \n",
       "298        69  2009          11.00       87934    Petrol       Dealer   \n",
       "299        69  2017          12.50        9000    Diesel       Dealer   \n",
       "300        66  2016           5.90        5464    Petrol       Dealer   \n",
       "\n",
       "    Transmission  Owner  Selling_Price  \n",
       "0         Manual      0           3.35  \n",
       "1         Manual      0           4.75  \n",
       "2         Manual      0           7.25  \n",
       "3         Manual      0           2.85  \n",
       "4         Manual      0           4.60  \n",
       "..           ...    ...            ...  \n",
       "296       Manual      0           9.50  \n",
       "297       Manual      0           4.00  \n",
       "298       Manual      0           3.35  \n",
       "299       Manual      0          11.50  \n",
       "300       Manual      0           5.30  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_name_l=LabelEncoder()\n",
    "dff['Car_Name']=car_name_l.fit_transform(dff[\"Car_Name\"])\n",
    "dff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "733d20ab-fc48-441b-a76b-094fcc7f1749",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Petrol', 'Diesel', 'CNG'], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dff['Fuel_Type'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "66253298-0ce1-46d0-b5e6-fff265f8a4d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 1,\n",
       "       2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1,\n",
       "       2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2,\n",
       "       2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2,\n",
       "       2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fuel_type_l=LabelEncoder()\n",
    "fuel_type_l.fit_transform(dff[\"Fuel_Type\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5bd9631b-db58-4992-9fb3-f88a944171ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type Selling_type  \\\n",
       "0          90  2014           5.59       27000          2       Dealer   \n",
       "1          93  2013           9.54       43000          1       Dealer   \n",
       "2          68  2017           9.85        6900          2       Dealer   \n",
       "3          96  2011           4.15        5200          2       Dealer   \n",
       "4          92  2014           6.87       42450          1       Dealer   \n",
       "..        ...   ...            ...         ...        ...          ...   \n",
       "296        69  2016          11.60       33988          1       Dealer   \n",
       "297        66  2015           5.90       60000          2       Dealer   \n",
       "298        69  2009          11.00       87934          2       Dealer   \n",
       "299        69  2017          12.50        9000          1       Dealer   \n",
       "300        66  2016           5.90        5464          2       Dealer   \n",
       "\n",
       "    Transmission  Owner  Selling_Price  \n",
       "0         Manual      0           3.35  \n",
       "1         Manual      0           4.75  \n",
       "2         Manual      0           7.25  \n",
       "3         Manual      0           2.85  \n",
       "4         Manual      0           4.60  \n",
       "..           ...    ...            ...  \n",
       "296       Manual      0           9.50  \n",
       "297       Manual      0           4.00  \n",
       "298       Manual      0           3.35  \n",
       "299       Manual      0          11.50  \n",
       "300       Manual      0           5.30  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fuel_type_l=LabelEncoder()\n",
    "dff['Fuel_Type']=fuel_type_l.fit_transform(df[\"Fuel_Type\"])\n",
    "dff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b68de8ae-51bd-4204-8e75-5bb1d41423fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "    Transmission  Owner  Selling_Price  \n",
       "0         Manual      0           3.35  \n",
       "1         Manual      0           4.75  \n",
       "2         Manual      0           7.25  \n",
       "3         Manual      0           2.85  \n",
       "4         Manual      0           4.60  \n",
       "..           ...    ...            ...  \n",
       "296       Manual      0           9.50  \n",
       "297       Manual      0           4.00  \n",
       "298       Manual      0           3.35  \n",
       "299       Manual      0          11.50  \n",
       "300       Manual      0           5.30  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seller_type_l=LabelEncoder()\n",
    "dff['Selling_type']=seller_type_l.fit_transform(df[\"Selling_type\"])\n",
    "dff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fc5a0073-b370-4b20-a6a3-cff4e2eaedcf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  \n",
       "0               1      0           3.35  \n",
       "1               1      0           4.75  \n",
       "2               1      0           7.25  \n",
       "3               1      0           2.85  \n",
       "4               1      0           4.60  \n",
       "..            ...    ...            ...  \n",
       "296             1      0           9.50  \n",
       "297             1      0           4.00  \n",
       "298             1      0           3.35  \n",
       "299             1      0          11.50  \n",
       "300             1      0           5.30  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans_type_l=LabelEncoder()\n",
    "dff['Transmission']=trans_type_l.fit_transform(df[\"Transmission\"])\n",
    "dff"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fd0a373-4282-4280-9dcb-8bf47ec32c99",
   "metadata": {},
   "source": [
    "# create X "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "380c3675-1969-4497-bbf4-3fb671c1ea31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  \n",
       "0               1      0  \n",
       "1               1      0  \n",
       "2               1      0  \n",
       "3               1      0  \n",
       "4               1      0  \n",
       "..            ...    ...  \n",
       "296             1      0  \n",
       "297             1      0  \n",
       "298             1      0  \n",
       "299             1      0  \n",
       "300             1      0  \n",
       "\n",
       "[301 rows x 8 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=dff.iloc[:,:-1]\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b522bde-0ea1-4ea7-a936-64b9818a505d",
   "metadata": {},
   "source": [
    "# create y "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "31c64559-951f-4404-89fd-3ea4d52cfcac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       3.35\n",
       "1       4.75\n",
       "2       7.25\n",
       "3       2.85\n",
       "4       4.60\n",
       "       ...  \n",
       "296     9.50\n",
       "297     4.00\n",
       "298     3.35\n",
       "299    11.50\n",
       "300     5.30\n",
       "Name: Selling_Price, Length: 301, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=dff.iloc[:,-1]\n",
    "y\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f358755-1172-4622-b35b-b57506b6a6fa",
   "metadata": {},
   "source": [
    " # feature scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "53cd3cb6-ed09-4701-8ea8-e17f409f5e79",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "009698a9-eb62-4f03-b103-6c9796e1306d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.074323</td>\n",
       "      <td>0.128897</td>\n",
       "      <td>-0.236256</td>\n",
       "      <td>-0.256224</td>\n",
       "      <td>0.500183</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.191828</td>\n",
       "      <td>-0.217514</td>\n",
       "      <td>0.221544</td>\n",
       "      <td>0.155911</td>\n",
       "      <td>-1.852241</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.212627</td>\n",
       "      <td>1.168129</td>\n",
       "      <td>0.257472</td>\n",
       "      <td>-0.773969</td>\n",
       "      <td>0.500183</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.309332</td>\n",
       "      <td>-0.910335</td>\n",
       "      <td>-0.403151</td>\n",
       "      <td>-0.817758</td>\n",
       "      <td>0.500183</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.152659</td>\n",
       "      <td>0.128897</td>\n",
       "      <td>-0.087906</td>\n",
       "      <td>0.141743</td>\n",
       "      <td>-1.852241</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>0.251795</td>\n",
       "      <td>0.821718</td>\n",
       "      <td>0.460295</td>\n",
       "      <td>-0.076225</td>\n",
       "      <td>-1.852241</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>0.134290</td>\n",
       "      <td>0.475308</td>\n",
       "      <td>-0.200328</td>\n",
       "      <td>0.593804</td>\n",
       "      <td>0.500183</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>0.251795</td>\n",
       "      <td>-1.603156</td>\n",
       "      <td>0.390756</td>\n",
       "      <td>1.313340</td>\n",
       "      <td>0.500183</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>0.251795</td>\n",
       "      <td>1.168129</td>\n",
       "      <td>0.564604</td>\n",
       "      <td>-0.719876</td>\n",
       "      <td>-1.852241</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>0.134290</td>\n",
       "      <td>0.821718</td>\n",
       "      <td>-0.200328</td>\n",
       "      <td>-0.810958</td>\n",
       "      <td>0.500183</td>\n",
       "      <td>-0.737285</td>\n",
       "      <td>0.39148</td>\n",
       "      <td>-0.174501</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name      Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0    1.074323  0.128897      -0.236256   -0.256224   0.500183     -0.737285   \n",
       "1    1.191828 -0.217514       0.221544    0.155911  -1.852241     -0.737285   \n",
       "2    0.212627  1.168129       0.257472   -0.773969   0.500183     -0.737285   \n",
       "3    1.309332 -0.910335      -0.403151   -0.817758   0.500183     -0.737285   \n",
       "4    1.152659  0.128897      -0.087906    0.141743  -1.852241     -0.737285   \n",
       "..        ...       ...            ...         ...        ...           ...   \n",
       "296  0.251795  0.821718       0.460295   -0.076225  -1.852241     -0.737285   \n",
       "297  0.134290  0.475308      -0.200328    0.593804   0.500183     -0.737285   \n",
       "298  0.251795 -1.603156       0.390756    1.313340   0.500183     -0.737285   \n",
       "299  0.251795  1.168129       0.564604   -0.719876  -1.852241     -0.737285   \n",
       "300  0.134290  0.821718      -0.200328   -0.810958   0.500183     -0.737285   \n",
       "\n",
       "     Transmission     Owner  \n",
       "0         0.39148 -0.174501  \n",
       "1         0.39148 -0.174501  \n",
       "2         0.39148 -0.174501  \n",
       "3         0.39148 -0.174501  \n",
       "4         0.39148 -0.174501  \n",
       "..            ...       ...  \n",
       "296       0.39148 -0.174501  \n",
       "297       0.39148 -0.174501  \n",
       "298       0.39148 -0.174501  \n",
       "299       0.39148 -0.174501  \n",
       "300       0.39148 -0.174501  \n",
       "\n",
       "[301 rows x 8 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s=StandardScaler()\n",
    "x=pd.DataFrame(s.fit_transform(x),columns=x.columns)\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3cee7d2-5b1b-45ee-9f50-9ac35c06354d",
   "metadata": {},
   "source": [
    " # train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "35d0fc41-3851-422b-9852-55941ade3c15",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "acb58976-dcdd-4733-8b19-78ebee425367",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(301, 8) (301,)\n",
      "(240, 8) (240,)\n",
      "(61, 8) (61,)\n"
     ]
    }
   ],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)\n",
    "print(x.shape,y.shape)\n",
    "print(x_train.shape,y_train.shape)\n",
    "print(x_test.shape,y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "909c46ee-fef2-4305-b5d2-ba7a8149768a",
   "metadata": {},
   "source": [
    "# import all necessary models "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b34f4136-51bf-4fd6-98e1-2984056a3afb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "488803b3-1693-4cf8-861d-181cce3d8d6b",
   "metadata": {},
   "source": [
    "# using linear regression model for prediction "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "06582cd5-04f1-4249-8c95-08bbdd83c691",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr=LinearRegression()\n",
    "lr.fit(x_train,y_train)\n",
    "display(lr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "286b4de9-7011-4c85-904a-635c32f7edc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.14407869e+00, -4.27542723e-01,  4.28915320e+00,  8.65847314e+00,\n",
       "        1.41534633e+01,  4.91098601e+00,  3.53269899e+00,  1.44873984e+00,\n",
       "        5.37962173e+00,  4.66179581e+00,  2.25451947e+00,  1.63444593e+00,\n",
       "        5.09732846e+00,  7.63886450e+00,  8.25193184e+00,  1.42036505e+01,\n",
       "        7.39299402e+00,  4.27751257e+00, -4.56772303e-01,  2.37895036e+00,\n",
       "        5.02588337e+00,  3.80778732e+00,  6.49158822e+00,  8.14529035e+00,\n",
       "       -1.91712844e+00,  1.92942148e+00, -8.13001987e-01,  8.19942074e-01,\n",
       "        1.25468628e-02,  7.21131727e+00,  3.08027057e+00,  7.05582189e+00,\n",
       "        7.30878846e-01,  7.55153917e+00,  3.57524376e+00,  1.81089524e+00,\n",
       "        5.59962844e+00,  6.59211335e+00, -2.71910343e+00,  8.76297225e+00,\n",
       "        8.83374475e+00,  1.99061549e+01,  4.40077123e+00,  3.85511033e+00,\n",
       "        6.26730474e+00,  9.51961840e+00,  1.23581173e-01,  1.68305445e+00,\n",
       "        5.18217202e+00,  6.95502862e+00,  8.16427179e+00,  4.19652569e+00,\n",
       "        4.91977806e+00,  2.02644474e+01,  1.75947110e+00,  1.31154117e+00,\n",
       "        2.97049399e-01,  1.98962315e+00,  3.40764248e+00,  8.49728803e-01,\n",
       "        3.58732167e+00])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prediction=lr.predict(x_test)\n",
    "display(prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55293918-0663-49a6-859b-f103fa73d5a1",
   "metadata": {},
   "source": [
    "# prediction with full data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c1d8ccbb-4de4-4843-92ec-04f47c6dbc16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3.83332355e+00,  6.52433915e+00,  6.98843234e+00,  2.14812216e+00,\n",
       "        5.75354329e+00,  8.83374475e+00,  5.38438323e+00,  6.95502862e+00,\n",
       "        7.55153917e+00,  7.05099977e+00,  4.28860120e+00,  7.64071137e+00,\n",
       "        7.63886450e+00,  5.16204565e+00,  2.31187131e+00,  8.25193184e+00,\n",
       "        7.86777244e+00,  8.25193184e+00,  6.85219892e+00,  3.22977210e+00,\n",
       "        3.92307637e+00,  5.19833346e+00,  5.02588337e+00,  2.81406195e+00,\n",
       "        2.75882109e+00,  2.43478354e+00,  3.40764248e+00,  4.32035027e+00,\n",
       "        1.46620314e+00,  7.67388824e+00,  4.53319252e+00,  2.20288812e+00,\n",
       "        6.04331690e+00,  7.09118349e+00,  6.26730474e+00,  6.36447636e+00,\n",
       "        4.81479623e+00, -3.57082566e+00,  3.92262619e+00,  3.75811555e-01,\n",
       "        7.07520294e+00,  3.03321304e+00,  1.99289170e+00,  6.26299175e+00,\n",
       "        1.65748058e+00,  8.16427179e+00,  2.92869628e+00, -1.39887406e-01,\n",
       "        5.16276448e+00,  8.01635957e+00,  1.64350973e+01,  1.79673013e+01,\n",
       "        1.41534633e+01,  1.55198889e+01,  8.41444461e-01,  7.21131727e+00,\n",
       "        4.88913599e+00,  7.80263901e+00,  3.30784735e+00,  1.99061549e+01,\n",
       "        9.06289890e+00,  5.07657881e+00,  1.97015643e+01,  2.02644474e+01,\n",
       "        2.13919789e+01,  5.77961271e+00,  1.42036505e+01,  1.00300929e+01,\n",
       "        5.88827016e+00,  1.13963361e+01,  5.55289079e+00,  7.02357720e+00,\n",
       "        8.97442727e+00,  2.62720423e+00,  6.43528651e+00,  4.70856417e+00,\n",
       "        7.17009198e+00,  3.71966429e+00,  1.09486677e+01,  1.65219488e+01,\n",
       "        1.01547976e+01,  6.59211335e+00,  1.66071999e+01,  9.04948558e+00,\n",
       "        4.25463185e+00,  5.32555170e+00,  4.14232379e+01,  6.45668280e+00,\n",
       "        3.53647174e+00,  4.27751257e+00,  7.37537848e+00,  9.69436740e+00,\n",
       "        3.58732167e+00,  1.79673013e+01,  1.00941332e+01,  8.49449179e+00,\n",
       "        1.61383178e+01,  1.08149528e+01,  9.03525705e+00,  1.00797255e+01,\n",
       "        2.01661969e+00,  2.37895036e+00,  2.35322384e+00,  2.30365608e+00,\n",
       "        2.21557545e+00,  1.72957530e+00,  8.49728803e-01,  6.01651440e-01,\n",
       "        1.75947110e+00,  2.17742206e+00,  1.95069553e+00,  1.81089524e+00,\n",
       "        1.43336099e+00,  1.62355617e+00,  1.36130647e+00,  1.35854173e+00,\n",
       "        4.89896101e-01,  1.56432607e+00,  1.31154117e+00,  8.28940849e-01,\n",
       "        1.73623690e+00, -1.36498521e-01,  1.68305445e+00,  4.15248156e-01,\n",
       "        3.39123976e-01, -9.92874221e-01,  2.02149171e+00,  1.53388663e+00,\n",
       "        1.96580756e+00,  1.92942148e+00,  1.92157175e+00,  1.06674088e+00,\n",
       "        2.00932686e+00,  1.63444593e+00,  1.88265351e+00,  1.12291228e+00,\n",
       "        8.19942074e-01,  2.97049399e-01,  1.50798447e+00,  1.15351523e+00,\n",
       "        3.81472152e-01,  1.46156668e+00,  1.01508553e+00,  1.42867281e+00,\n",
       "        7.30878846e-01, -1.14505546e-01,  6.94048241e-01,  8.53420449e-01,\n",
       "       -9.68728792e-01,  1.49620642e+00, -4.27542723e-01,  1.28241877e+00,\n",
       "        1.25468628e-02,  2.27072950e-01,  7.55452527e-01,  3.24074207e+00,\n",
       "        1.73703264e+00,  1.04695216e+00,  1.78814140e+00,  3.24240092e+00,\n",
       "       -4.53717100e-01,  6.52864253e-01,  4.25264667e-03, -8.61338150e-01,\n",
       "        1.37118032e+00,  2.89648535e+00,  1.44873984e+00,  5.41255202e-01,\n",
       "        2.88166210e-01,  9.79710953e-01, -3.46194116e-02,  1.02575246e+00,\n",
       "        6.40112418e-01,  3.26999614e+00,  9.19218014e-01, -8.13001987e-01,\n",
       "       -4.56772303e-01,  2.76697523e+00,  1.97980833e+00, -1.86013603e+00,\n",
       "       -4.59967606e-01,  1.14635940e+00,  1.23581173e-01,  1.35801506e-01,\n",
       "       -2.71910343e+00, -2.46947078e-01,  3.96468947e-01,  8.06494248e-02,\n",
       "        1.90809777e-01, -3.14902977e+00, -1.91712844e+00, -1.22453894e+00,\n",
       "       -3.24211824e+00, -7.96542182e-01, -1.84742616e+00,  7.78456837e-01,\n",
       "       -3.00597568e+00, -1.09928814e+00, -1.67130308e+00, -2.35241299e+00,\n",
       "       -2.87829881e+00,  3.08027057e+00,  4.26967838e+00,  2.08342085e+00,\n",
       "        3.71779011e+00,  3.80778732e+00,  5.75734417e+00,  5.67206535e+00,\n",
       "        6.23654016e+00,  5.75646494e+00,  2.57267902e+00,  9.60480943e+00,\n",
       "        8.14529035e+00,  3.16000774e+00,  5.09732846e+00,  4.66179581e+00,\n",
       "        4.19652569e+00,  4.18270199e+00,  4.95848296e+00,  4.66234876e+00,\n",
       "        4.88090292e+00,  5.37962173e+00,  5.88122297e+00,  7.14407869e+00,\n",
       "        6.49158822e+00,  2.25451947e+00,  4.28915320e+00,  1.98962315e+00,\n",
       "        5.97730681e+00,  4.88563350e+00,  6.45171833e+00,  6.73580907e+00,\n",
       "        9.76540440e+00,  4.79727412e+00,  4.40077123e+00,  6.73503495e+00,\n",
       "        4.20012538e+00,  8.95084081e+00,  4.91977806e+00,  2.56866832e+00,\n",
       "        6.13035168e+00,  3.85511033e+00,  4.46393620e+00,  5.60705424e+00,\n",
       "        6.42960042e+00,  5.91648256e+00,  3.53269899e+00,  5.83675685e+00,\n",
       "        2.99608112e+00,  5.55175947e+00,  9.51961840e+00,  5.16857503e+00,\n",
       "        6.18668852e+00,  7.05582189e+00,  5.18217202e+00,  2.80858201e+00,\n",
       "        7.99790741e+00,  7.65751936e+00,  7.74225307e+00,  4.41023224e+00,\n",
       "        8.11037145e+00,  4.91098601e+00,  4.25582559e+00,  5.59962844e+00,\n",
       "        4.77973852e+00,  6.39896351e+00,  4.41606031e+00,  7.77841170e+00,\n",
       "        5.15413703e+00,  6.20459245e+00,  4.35940450e+00,  3.57524376e+00,\n",
       "        6.15608787e+00,  2.91355276e+00,  4.43016056e+00,  9.54077629e+00,\n",
       "        7.74335897e+00,  7.76005799e+00,  5.97161878e+00,  7.26714483e+00,\n",
       "        4.43993528e+00,  1.45862283e+00,  8.76297225e+00,  7.43624450e+00,\n",
       "        3.68279156e+00,  7.39299402e+00,  5.61746109e+00,  6.41493328e+00,\n",
       "        7.69248778e+00,  8.21124571e+00,  4.24256719e+00,  4.43346587e+00,\n",
       "        5.92738296e+00,  4.09757370e+00,  4.33969262e+00,  8.77329659e+00,\n",
       "        8.65847314e+00,  4.18815052e+00,  3.91026414e+00,  9.58106022e+00,\n",
       "        4.88117547e+00])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full=lr.predict(x)\n",
    "full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0ce502f8-ec84-4b00-855d-0aa4582693c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>predicted price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.833324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>6.524339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>6.988432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>2.148122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>5.753543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>8.658473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.188151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.910264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>9.581060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>4.881175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  predicted price  \n",
       "0               1      0           3.35         3.833324  \n",
       "1               1      0           4.75         6.524339  \n",
       "2               1      0           7.25         6.988432  \n",
       "3               1      0           2.85         2.148122  \n",
       "4               1      0           4.60         5.753543  \n",
       "..            ...    ...            ...              ...  \n",
       "296             1      0           9.50         8.658473  \n",
       "297             1      0           4.00         4.188151  \n",
       "298             1      0           3.35         3.910264  \n",
       "299             1      0          11.50         9.581060  \n",
       "300             1      0           5.30         4.881175  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "result=pd.concat([dff,pd.DataFrame(full,columns=['predicted price'])],axis=1)\n",
    "display(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96405b01-1e1c-4fbc-81c6-a65e938cef88",
   "metadata": {},
   "source": [
    " # prediction with train data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e9096b00-a753-4361-8831-0fea3789322c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>predicted price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>6.435287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>2.568668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>21.391979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>4.339693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>5.617461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  predicted price  \n",
       "0               1      0           3.35         6.435287  \n",
       "1               1      0           4.75         2.568668  \n",
       "2               1      0           7.25        21.391979  \n",
       "3               1      0           2.85         4.339693  \n",
       "4               1      0           4.60         5.617461  \n",
       "..            ...    ...            ...              ...  \n",
       "296             1      0           9.50              NaN  \n",
       "297             1      0           4.00              NaN  \n",
       "298             1      0           3.35              NaN  \n",
       "299             1      0          11.50              NaN  \n",
       "300             1      0           5.30              NaN  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tr=lr.predict(x_train)\n",
    "result=pd.concat([dff,pd.DataFrame(tr,columns=['predicted price'])],axis=1)\n",
    "display(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76133b3f-5284-4c93-b2d2-4f78db7c519d",
   "metadata": {},
   "source": [
    "# acuracy and mean absolute error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1912e40f-a301-48e7-860a-d80f62913d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared error 0.8775067217131813\n"
     ]
    }
   ],
   "source": [
    "error=metrics.r2_score(y,full)\n",
    "print(\"r squared error\",error)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da346ed9-2011-43f3-95a6-27d20c9f0862",
   "metadata": {},
   "source": [
    " # visualization "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cca0a0a3-14da-49cc-8bc9-809b2a658cbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y,full)\n",
    "plt.xlabel(\"Actual price \")\n",
    "plt.ylabel(\"predicted price\")\n",
    "plt.title(\"actual prices vs predicted prices \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f8c4c07-84cb-43ea-81bb-061ce987f061",
   "metadata": {},
   "source": [
    "# predicion with test data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "36b27e3c-aa02-4b7a-a98c-e0ab7e95e4df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.14407869e+00, -4.27542723e-01,  4.28915320e+00,  8.65847314e+00,\n",
       "        1.41534633e+01,  4.91098601e+00,  3.53269899e+00,  1.44873984e+00,\n",
       "        5.37962173e+00,  4.66179581e+00,  2.25451947e+00,  1.63444593e+00,\n",
       "        5.09732846e+00,  7.63886450e+00,  8.25193184e+00,  1.42036505e+01,\n",
       "        7.39299402e+00,  4.27751257e+00, -4.56772303e-01,  2.37895036e+00,\n",
       "        5.02588337e+00,  3.80778732e+00,  6.49158822e+00,  8.14529035e+00,\n",
       "       -1.91712844e+00,  1.92942148e+00, -8.13001987e-01,  8.19942074e-01,\n",
       "        1.25468628e-02,  7.21131727e+00,  3.08027057e+00,  7.05582189e+00,\n",
       "        7.30878846e-01,  7.55153917e+00,  3.57524376e+00,  1.81089524e+00,\n",
       "        5.59962844e+00,  6.59211335e+00, -2.71910343e+00,  8.76297225e+00,\n",
       "        8.83374475e+00,  1.99061549e+01,  4.40077123e+00,  3.85511033e+00,\n",
       "        6.26730474e+00,  9.51961840e+00,  1.23581173e-01,  1.68305445e+00,\n",
       "        5.18217202e+00,  6.95502862e+00,  8.16427179e+00,  4.19652569e+00,\n",
       "        4.91977806e+00,  2.02644474e+01,  1.75947110e+00,  1.31154117e+00,\n",
       "        2.97049399e-01,  1.98962315e+00,  3.40764248e+00,  8.49728803e-01,\n",
       "        3.58732167e+00])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_prediction=lr.predict(x_test)\n",
    "test_prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "06709972-e7ba-4e68-a973-9531666f42fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>predicted price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>7.144079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>-0.427543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>4.289153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>8.658473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>14.153463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  predicted price  \n",
       "0               1      0           3.35         7.144079  \n",
       "1               1      0           4.75        -0.427543  \n",
       "2               1      0           7.25         4.289153  \n",
       "3               1      0           2.85         8.658473  \n",
       "4               1      0           4.60        14.153463  \n",
       "..            ...    ...            ...              ...  \n",
       "296             1      0           9.50              NaN  \n",
       "297             1      0           4.00              NaN  \n",
       "298             1      0           3.35              NaN  \n",
       "299             1      0          11.50              NaN  \n",
       "300             1      0           5.30              NaN  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "result=pd.concat([dff,pd.DataFrame(test_prediction,columns=['predicted price'])],axis=1)\n",
    "display(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d8e8013-e1c1-4212-b12f-3c15f31458c6",
   "metadata": {},
   "source": [
    "# accuracy and mean absolute error on test data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "dd2a02ad-39a8-4cac-8102-e3d8f9ea0eb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared error 0.91342959000496\n",
      "mean absolute error 0.9995912295509737\n"
     ]
    }
   ],
   "source": [
    "error=metrics.r2_score(y_test,test_prediction)\n",
    "print(\"r squared error\",error)\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "print(\"mean absolute error\",mean_absolute_error(y_test,test_prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "733ccf10-e721-40c5-a06f-1700534cafbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAHHCAYAAACle7JuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABKQElEQVR4nO3deXhTZd7/8U9aSlqgDRS6AkItmxUBAVlGNtlRkG2G5VFBVHAQUMTtYRwooMigI+CCMCqKiiKggKLPMCqyOFhAwKIIg7UWAWlZim0pyNae3x/8kiF0S9K0yWnfr+vKdZmTk5Nv0tZ8OOe+v7fFMAxDAAAAJhTg6wIAAAA8RZABAACmRZABAACmRZABAACmRZABAACmRZABAACmRZABAACmRZABAACmRZABAACmRZAByoHFYtGMGTPK5bW6deumbt26lctrwdnVn/3BgwdlsVi0dOlSn9V0tfL8/ZgxY4YsFku5vBYqL4IMKqWjR49qxowZSk5O9nUpQAFff/21ZsyYoaysLF+XAvg9ggwqpaNHj2rmzJkVMsh89tln+uyzz3xdBiQ1aNBAv//+u+666y63nvf1119r5syZpg8yf/3rX/X777/7ugxUcAQZoII4e/asJKlq1aqqWrWqj6sxlzNnzpTJcS0Wi4KDgxUYGFgmx/dX9s+zSpUqCg4O9nE1qOgIMjCNX375RQ888ICaNm2qkJAQ1a5dW3/605908ODBAvtmZWXp4YcfVsOGDWW1WlWvXj2NGjVKJ0+e1KZNm3TTTTdJksaMGSOLxeI0jqFhw4a6++67Cxzz6rEFFy5c0PTp09WmTRvZbDZVr15dnTt31saNGz16f5s2bZLFYtGKFSv0l7/8RdHR0apevbpuv/12HT58uEAtzZs3165du9SlSxdVq1ZNf/nLXwqtU5LOnTunGTNmqEmTJgoODlZMTIyGDBmi1NRUxz75+flasGCBrr/+egUHBysqKkr333+/fvvtN6dj7dy5U3369FGdOnUUEhKiuLg43XPPPcW+t/79++vaa68t9LGOHTuqbdu2jvuff/65OnXqpJo1a6pGjRpq2rSp470Vx2KxaOLEiXr33XfVtGlTBQcHq02bNtqyZYvTfvZxG/v27dP//M//qFatWurUqZPj8WXLlqlNmzYKCQlReHi4RowYUeDzl6RXX31V8fHxCgkJUbt27fTVV18V2KeoMTL/+c9/NGzYMEVERCgkJERNmzbVk08+6ajvsccekyTFxcU5fj+v/D33Zo1l+XkWNUZm2bJlateunapVq6ZatWqpS5cuBc4i/vOf/1Tnzp1VvXp1hYaG6rbbbtMPP/zgtE9GRobGjBmjevXqyWq1KiYmRgMHDiz0/wmouKr4ugDAVd98842+/vprjRgxQvXq1dPBgwe1aNEidevWTfv27VO1atUkSbm5uercubP279+ve+65R61bt9bJkyf18ccf68iRI7ruuus0a9YsTZ8+XePGjVPnzp0lSX/4wx/cqicnJ0evv/66Ro4cqbFjx+r06dNasmSJ+vTpox07dqhVq1Yevc/Zs2fLYrHoiSee0PHjx7VgwQL17NlTycnJCgkJceyXmZmpfv36acSIEbrzzjsVFRVV6PHy8vLUv39/bdiwQSNGjNBDDz2k06dP6/PPP9fevXsVHx8vSbr//vu1dOlSjRkzRg8++KDS0tL08ssv69tvv9XWrVsVFBSk48ePq3fv3oqIiND//u//qmbNmjp48KBWr15d7HsaPny4Ro0apW+++cYRIqXL4XTbtm167rnnJEk//PCD+vfvrxYtWmjWrFmyWq366aeftHXrVpc+u82bN2vFihV68MEHZbVa9corr6hv377asWOHmjdv7rTvn/70JzVu3FjPPPOMDMNwfPbTpk3TsGHDdN999+nEiRN66aWX1KVLF3377beqWbOmJGnJkiW6//779Yc//EGTJ0/Wzz//rNtvv13h4eGqX79+sTV+99136ty5s4KCgjRu3Dg1bNhQqampWrdunWbPnq0hQ4boxx9/1PLlyzV//nzVqVNHkhQREVFuNXrr8yzMzJkzNWPGDP3hD3/QrFmzVLVqVW3fvl1ffvmlevfuLUl65513NHr0aPXp00dz587V2bNntWjRInXq1EnffvutGjZsKEkaOnSofvjhB02aNEkNGzbU8ePH9fnnn+vQoUOOfVAJGIBJnD17tsC2pKQkQ5Lx9ttvO7ZNnz7dkGSsXr26wP75+fmGYRjGN998Y0gy3nzzzQL7NGjQwBg9enSB7V27djW6du3quH/p0iXj/PnzTvv89ttvRlRUlHHPPfc4bZdkJCYmFvPuDGPjxo2GJKNu3bpGTk6OY/vKlSsNScYLL7zgVIskY/HixSXW+cYbbxiSjHnz5hXY1/55fPXVV4Yk491333V6fP369U7b16xZY0gyvvnmm2Lfy9Wys7MNq9VqPPLII07bn332WcNisRi//PKLYRiGMX/+fEOSceLECbeObxiXP2NJxs6dOx3bfvnlFyM4ONgYPHiwY1tiYqIhyRg5cqTT8w8ePGgEBgYas2fPdtr+/fffG1WqVHFsv3DhghEZGWm0atXK6ef/6quvGpKcPvu0tLQCv2ddunQxQkNDHe/Zzv6zMAzDeO655wxJRlpaWpnXWJTSfp5XPmaXkpJiBAQEGIMHDzby8vIKff+nT582atasaYwdO9bp8YyMDMNmszm2//bbb4Yk47nnnivxvaBi49ISTOPKsxEXL15UZmamGjVqpJo1a2r37t2Oxz788EO1bNlSgwcPLnAMb04FDQwMdIxFyc/P16lTp3Tp0iW1bdvWqR53jRo1SqGhoY77f/zjHxUTE6P/+7//c9rParVqzJgxJR7vww8/VJ06dTRp0qQCj9k/j1WrVslms6lXr146efKk49amTRvVqFHDcbnM/q/9Tz75RBcvXnT5PYWFhalfv35auXKl07/WV6xYoQ4dOuiaa65xOv5HH32k/Px8l49v17FjR7Vp08Zx/5prrtHAgQP1r3/9S3l5eU77/vnPf3a6v3r1auXn52vYsGFOn0F0dLQaN27s+Ax27typ48eP689//rPTWKS7775bNput2PpOnDihLVu26J577nG8ZztXfjfLo8YrlebzLMzatWuVn5+v6dOnKyDA+evH/v4///xzZWVlaeTIkU7vMTAwUO3bt3e8x5CQEFWtWlWbNm0qcPkTlQtBBqbx+++/a/r06apfv76sVqvq1KmjiIgIZWVlKTs727FfampqgdPeZeWtt95SixYtFBwcrNq1aysiIkKffvqpUz3uaty4sdN9i8WiRo0aFbjuX7duXZcG9aampqpp06aqUqXoK8kpKSnKzs5WZGSkIiIinG65ubk6fvy4JKlr164aOnSoZs6cqTp16mjgwIF68803df78+RLrGD58uA4fPqykpCRHXbt27dLw4cOd9rn55pt13333KSoqSiNGjNDKlStdDjVXf3aS1KRJE509e1YnTpxw2h4XF1fgMzAMQ40bNy7wGezfv9/xGfzyyy+FvlZQUFCR44Dsfv75Z0ny+PezPGq8Umk+z8KkpqYqICBACQkJRe6TkpIiSerevXuB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xWLR2rVrnR6/++67ZbFYnG59+/b1TbEAAMDv+DTInDlzRi1bttTChQuL3Kdv375KT0933JYvX16OFQIAAH9WxZcv3q9fP/Xr16/YfaxWq6Kjo8upIgAAYCZ+P0Zm06ZNioyMVNOmTTV+/HhlZmYWu//58+eVk5PjdAMAABWTXweZvn376u2339aGDRs0d+5cbd68Wf369VNeXl6Rz5kzZ45sNpvjVr9+/XKsGAAAlCeLYRiGr4uQJIvFojVr1mjQoEFF7vPzzz8rPj5eX3zxhXr06FHoPufPn9f58+cd93NyclS/fn1lZ2crLCzM22UDAIAykJOTI5vNVuL3t1+fkbnatddeqzp16uinn34qch+r1aqwsDCnGwAAqJhMFWSOHDmizMxMxcTE+LoUAADgB3w6ayk3N9fp7EpaWpqSk5MVHh6u8PBwzZw5U0OHDlV0dLRSU1P1+OOPq1GjRurTp48PqwYAAP7Cp0Fm586duuWWWxz3p0yZIkkaPXq0Fi1apO+++05vvfWWsrKyFBsbq969e+upp56S1Wr1VckAAMCP+M1g37Li6mAhAADgP1z9/vbpGRkAAK6Wl29oR9opHT99TpGhwWoXF67AAEulrQPFI8gAAPzG+r3pmrlun9Kzzzm2xdiClTggQX2bl99ED3+pAyUz1awlAEDFtX5vusYv2+0UHiQpI/ucxi/brfV70ytVHXANQQYA4HN5+YZmrtunwgZt2rfNXLdPefllO6zTX+qA6wgyAACf25F2qsAZkCsZktKzz2lH2qlKUQdcR5ABAPjc8dNFhwdP9jN7HXAdQQYA4HORocFe3c/sdcB1BBkAgM+1iwtXjC1YRU1utujyrKF2ceGVog64jiADAPC5wACLEgckSFKBEGG/nzggocz7uPhLHXAdQQYA4Bf6No/RojtbK9rmfNkm2hasRXe2Lrf+Lf5SB1zDEgUAAL/iLx11/aWOyoolCgAAphQYYFHH+Nq+LsNv6kDxuLQEAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMy6Mgc+nSJX3xxRf6xz/+odOnT0uSjh49qtzc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3jy9/vrrTvv8/e9/V8uWLfXtt99q2rRpBY7x66+/qkuXLrJarfryyy+1a9cu3XPPPbp06ZIk6d1339X06dM1e/Zs7d+/X88884ymTZumt956y61aAXiO86cACrVkyRLdeeedkqS+ffsqOztbmzdvVrdu3SRJs2fP1ogRIzRz5kzHc1q2bClJCg8PV2BgoEJDQxUdHe3W63bv3t3p/quvvqqaNWtq8+bN6t+/v8vHqV+/vubPny+LxaKmTZvq+++/1/z58zV27Fin13rkkUcc9w8ePOh0jIULF8pms+n9999XUFCQJKlJkyaOxxMTE/X8889ryJAhkqS4uDjt27dP//jHPzR69GiXawXgOc7IACjgwIED2rFjh0aOHClJqlKlioYPH64lS5Y49klOTlaPHj28/trHjh3T2LFj1bhxY9lsNoWFhSk3N1eHDh1y6zgdOnRwXNKSpI4dOyolJUV5eXmObW3bti32GMnJyercubMjxFzpzJkzSk1N1b333qsaNWo4bk8//bTTpScAZYszMgAKWLJkiS5duqTY2FjHNsMwZLVa9fLLL8tmsykkJMTt4wYEBDhdnpKkixcvOt0fPXq0MjMz9cILL6hBgwayWq3q2LGjLly44NmbKUb16tWLfby495ibmytJeu2119S+fXunxwIDA0tfHACXcEYGgJNLly7p7bff1vPPP6/k5GTHbc+ePYqNjdXy5cslSS1atNCGDRuKPE7VqlWdzn5IUkREhDIyMpzCzNU9W7Zu3aoHH3xQt956q66//npZrVadPHnS7fexfft2p/v28TbuhIwWLVroq6++KhC2JCkqKkqxsbH6+eef1ahRI6dbXFyc2/UC8AxBBoCTTz75RL/99pvuvfdeNW/e3Ok2dOhQx+WlxMRELV++XImJidq/f7++//57zZ0713Gchg0basuWLfr1118dQaRbt246ceKEnn32WaWmpmrhwoX65z//6fT6jRs31jvvvKP9+/dr+/btuuOOOzw6+3Po0CFNmTJFBw4c0PLly/XSSy/poYcecusYEydOVE5OjkaMGKGdO3cqJSVF77zzjg4cOCBJmjlzpubMmaMXX3xRP/74o77//nu9+eabmjdvntv1AvAMQQaAkyVLlqhnz56y2WwFHhs6dKh27typ7777Tt26ddOqVav08ccfq1WrVurevbt27Njh2HfWrFk6ePCg4uPjFRERIUm67rrr9Morr2jhwoVq2bKlduzYoUcffbTA6//2229q3bq17rrrLj344IOKjIx0+32MGjVKv//+u9q1a6cJEybooYce0rhx49w6Ru3atfXll18qNzdXXbt2VZs2bfTaa685xszcd999ev311/Xmm2/qhhtuUNeuXbV06VLOyADlyGJcfcEaAEyuW7duatWqlek6CwNwH2dkAACAaRFkAACAaXFpCQAAmBZnZAAAgGkRZAAAgGkRZAAAgGkRZAAAgGkRZAAAgGkRZAAAgGkRZAAAgGkRZAAAgGkRZAAAgGn9P0AgqQ9gauz8AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test,test_prediction)\n",
    "plt.xlabel(\"Actual price \")\n",
    "plt.ylabel(\"predicted price\")\n",
    "plt.title(\"actual prices vs predicted prices\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e2b3374f-6a46-4d4e-ae4d-f8c180b8d845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(86.80846036649031, 91.34295900049601)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(x_train,y_train)*100,lr.score(x_test,y_test)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fd52be3-3980-413e-916a-3641c1fb49f0",
   "metadata": {},
   "source": [
    "# using decision tree regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ce920311-9bde-4609-9f8c-7cb27704a353",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4.9       ,  2.        , 33.        ,  3.75      ,  5.81666667,\n",
       "        8.525     ,  3.8       ,  0.46125   ,  2.65      ,  2.8       ,\n",
       "        2.65      ,  0.46125   ,  6.03333333,  0.31      ,  6.        ,\n",
       "        0.55      ,  9.15      ,  0.35      ,  2.25      ,  0.46125   ,\n",
       "       17.        ,  4.85      ,  5.125     ,  6.45      ,  1.1575    ,\n",
       "        5.35      ,  5.5       ,  0.51666667,  5.31666667,  0.65      ,\n",
       "        6.        ,  9.11333333,  1.25      ,  5.05      ,  0.2       ,\n",
       "        0.51666667,  0.465     ,  1.45      ,  2.75      ,  3.1       ,\n",
       "        3.25      ,  0.465     ,  5.4       ,  0.95      ,  0.9       ,\n",
       "        4.5       ,  3.        ,  5.95      ,  3.1       , 10.11      ,\n",
       "        3.15      ,  0.46125   ,  0.465     ,  6.03333333, 12.5       ,\n",
       "        0.65      ,  7.9       ,  6.95      ,  0.48      ,  2.1       ,\n",
       "        1.1575    ,  4.85      ,  7.3       ,  0.395     ,  7.3       ,\n",
       "        4.63333333,  4.        ,  1.1575    ,  5.3       ,  3.1       ,\n",
       "        4.65      , 20.75      ,  0.42      ,  5.125     ,  9.25      ,\n",
       "        0.555     ,  0.1       ,  0.465     ,  5.31666667,  5.81666667,\n",
       "        0.25      ,  5.81666667,  1.1575    ,  0.16      ,  2.85      ,\n",
       "        0.46125   ,  0.9       ,  2.9       ,  3.1       ,  1.5       ,\n",
       "        6.        ,  0.25      ,  2.65      , 10.25      ,  3.9       ,\n",
       "        8.05      , 14.73      , 23.        ,  7.25      , 11.25      ,\n",
       "        1.35      ,  0.3       , 35.        ,  2.85      ,  0.2       ,\n",
       "        4.        ,  2.55      ,  2.25      ,  0.46125   , 14.9       ,\n",
       "        2.9       ,  9.11333333,  1.        ,  4.1       , 18.75      ,\n",
       "        0.2       ,  5.05      ,  0.75      ,  3.25      ,  6.7       ,\n",
       "        5.5       ,  1.1575    ,  0.6       ,  0.14      ,  3.5       ,\n",
       "        0.555     ,  1.15      ,  5.81666667,  7.05      ,  4.5       ,\n",
       "       23.        ,  5.75      ,  0.51666667,  4.63333333,  0.35      ,\n",
       "        1.1575    ,  3.35      ,  4.        ,  8.65      ,  5.85      ,\n",
       "        4.        ,  4.        ,  5.31666667, 14.25      ,  7.75      ,\n",
       "        5.81666667,  2.5       ,  3.35      ,  0.6       ,  5.15      ,\n",
       "        2.5       ,  4.        ,  0.465     ,  0.6       ,  5.25      ,\n",
       "        0.3       ,  1.75      ,  2.8       ,  0.75      ,  4.85      ,\n",
       "       11.5       ,  0.16      ,  6.55      ,  4.35      ,  2.95      ,\n",
       "        3.49      ,  0.4       ,  1.05      ,  0.6       ,  8.525     ,\n",
       "       10.9       ,  0.6       ,  8.4       , 11.25      , 23.        ,\n",
       "        3.5       ,  7.3       ,  1.05      ,  1.65      ,  2.95      ,\n",
       "        4.75      ,  0.395     ,  9.11333333,  4.63333333,  4.75      ,\n",
       "        1.05      ,  3.65      ,  0.25      ,  1.95      ,  1.35      ,\n",
       "        0.75      , 14.5       ,  8.05      ,  4.        , 11.45      ,\n",
       "        3.        , 16.        ,  3.9       ,  0.8       ,  1.95      ,\n",
       "        0.27      ,  0.465     ,  0.46125   ,  6.03333333,  4.4       ,\n",
       "        2.35      ,  4.65      ,  0.75      ,  0.25      ,  6.25      ,\n",
       "        7.3       ,  0.55      ,  6.55      ,  0.35      ,  9.65      ,\n",
       "        0.14      ,  5.81666667,  1.1575    ,  6.55      ,  7.45      ,\n",
       "        3.        ,  0.46125   ,  8.4       ,  0.395     ,  4.5       ,\n",
       "        2.25      ,  0.2       ,  3.45      ,  4.        ,  5.9       ,\n",
       "        4.65      ,  9.7       , 11.75      ,  7.3       ,  0.18      ,\n",
       "        5.05      ,  0.2       ,  1.1575    ,  1.05      ,  0.395     ])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dt=DecisionTreeRegressor(max_depth=10)\n",
    "dt.fit(x_train,y_train)\n",
    "y_pred=dt.predict(x_train)\n",
    "display(y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d6ad999-8ffe-4ff6-8833-a37565f07322",
   "metadata": {},
   "source": [
    "# prediction on full data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "59cad6a6-1381-4dbf-862b-c073e245c291",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>predicted price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.350000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>4.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>7.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>2.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>4.650000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>8.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.350000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>11.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.316667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  predicted price  \n",
       "0               1      0           3.35         3.350000  \n",
       "1               1      0           4.75         4.750000  \n",
       "2               1      0           7.25         7.250000  \n",
       "3               1      0           2.85         2.850000  \n",
       "4               1      0           4.60         4.650000  \n",
       "..            ...    ...            ...              ...  \n",
       "296             1      0           9.50         8.050000  \n",
       "297             1      0           4.00         4.000000  \n",
       "298             1      0           3.35         3.350000  \n",
       "299             1      0          11.50        11.500000  \n",
       "300             1      0           5.30         5.316667  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "full_d=dt.predict(x)\n",
    "result=pd.concat([dff,pd.DataFrame(full_d,columns=['predicted price'])],axis=1)\n",
    "display(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d11e7eb6-4d97-4910-84e0-dd1c9b29b550",
   "metadata": {},
   "source": [
    "# absolute and mean absolute error of full data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a28f1a88-3d7c-49fb-be36-0cf9e48a238b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared error 0.9800861305713067\n",
      "mean absolute error 0.18460271317829458\n"
     ]
    }
   ],
   "source": [
    "error=metrics.r2_score(y,full_d)\n",
    "print(\"r squared error\",error)\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "print(\"mean absolute error\",mean_absolute_error(y,full_d))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "14f9aafb-0865-403e-b9e3-ddd40c1a9a0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(y,full_d)\n",
    "plt.xlabel(\"Actual price \")\n",
    "plt.ylabel(\"predicted price\")\n",
    "plt.title(\"actual prices vs predicted prices \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1824166-ea49-4290-806c-133f2852dfbd",
   "metadata": {},
   "source": [
    "# prediction on test data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6a4408b4-1e9e-4d8f-92ca-0c8d07b9fc32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>predicted price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>5.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>4.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>8.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>11.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  predicted price  \n",
       "0               1      0           3.35             5.95  \n",
       "1               1      0           4.75             0.40  \n",
       "2               1      0           7.25             4.40  \n",
       "3               1      0           2.85             8.05  \n",
       "4               1      0           4.60            11.75  \n",
       "..            ...    ...            ...              ...  \n",
       "296             1      0           9.50              NaN  \n",
       "297             1      0           4.00              NaN  \n",
       "298             1      0           3.35              NaN  \n",
       "299             1      0          11.50              NaN  \n",
       "300             1      0           5.30              NaN  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "full_t=dt.predict(x_test)\n",
    "result=pd.concat([dff,pd.DataFrame(full_t,columns=['predicted price'])],axis=1)\n",
    "display(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "babc827b-2b8e-4f48-9f8f-bfd65425dc7f",
   "metadata": {},
   "source": [
    "# absolute and mean absolute error of test data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "37a68b2e-1735-41f9-8d86-e1e397cc5d83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared error 0.9013950573515774\n",
      "mean absolute error 0.7779303278688524\n"
     ]
    }
   ],
   "source": [
    "error=metrics.r2_score(y_test,full_t)\n",
    "print(\"r squared error\",error)\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "print(\"mean absolute error\",mean_absolute_error(y_test,full_t))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b406fc3-1a1d-4b18-a9d1-766373de347c",
   "metadata": {},
   "source": [
    "# absolute and mean absolute error of train data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f321633d-5712-416c-a336-f2fbe04ece3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared error 0.9996278580084111\n",
      "mean absolute error 0.03379861111111113\n"
     ]
    }
   ],
   "source": [
    "error=metrics.r2_score(y_train,y_pred)\n",
    "print(\"r squared error\",error)\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "print(\"mean absolute error\",mean_absolute_error(y_train,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e3cb27f7-eeb2-4dc2-985f-cbaac0f37f42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(y_train,y_pred)\n",
    "plt.xlabel(\"Actual price \")\n",
    "plt.ylabel(\"predicted price\")\n",
    "plt.title(\"actual prices vs predicted prices \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "59c74c19-68b8-4638-ba47-1eb288f4b59b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99.96278580084112, 90.13950573515774)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt.score(x_train,y_train)*100,dt.score(x_test,y_test)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f35f48a9-de60-4eb9-ac29-7afe68e74acc",
   "metadata": {},
   "source": [
    "# using random forest regresssion model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b1c0d61b-6d1e-4044-b83a-0d8abe343436",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5.321 ,  2.3885, 28.355 ,  3.939 ,  5.6255,  8.8454,  4.4355,\n",
       "        0.4077,  2.8795,  2.8165,  2.769 ,  0.4699,  5.921 ,  0.3854,\n",
       "        5.711 ,  0.5528,  9.3743,  0.645 ,  2.4175,  0.4436, 15.5596,\n",
       "        4.783 ,  5.351 ,  6.178 ,  1.0945,  5.2205,  5.609 ,  0.5378,\n",
       "        5.237 ,  0.5583,  5.5425,  8.7991,  1.5545,  5.2045,  0.2088,\n",
       "        0.5452,  0.4529,  1.4765,  2.8196,  3.251 ,  3.2865,  0.4666,\n",
       "        5.2735,  1.0275,  0.8525,  5.08  ,  2.949 ,  6.7265,  3.095 ,\n",
       "       10.0454,  3.094 ,  0.4728,  0.4814,  5.9515, 11.3279,  0.6682,\n",
       "        7.3064,  6.9015,  0.5195,  2.396 ,  1.17  ,  5.0715,  7.314 ,\n",
       "        0.4076,  7.271 ,  4.529 ,  4.0875,  1.2005,  5.1625,  3.0655,\n",
       "        4.5175, 20.507 ,  0.3757,  4.838 ,  8.6302,  0.6075,  0.1564,\n",
       "        0.4962,  5.163 ,  5.8155,  0.2566,  6.016 ,  1.184 ,  0.1707,\n",
       "        2.679 ,  0.4501,  0.9505,  2.6665,  3.2275,  2.3199,  6.3464,\n",
       "        0.2717,  2.65  ,  9.823 ,  3.7335,  7.9475, 13.5957, 22.6565,\n",
       "        7.7133, 10.4456,  1.4325,  0.3286, 31.079 ,  2.8535,  0.297 ,\n",
       "        4.099 ,  2.5965,  2.339 ,  0.4663, 15.8025,  2.9345,  8.947 ,\n",
       "        1.0488,  4.1245, 21.1395,  0.1767,  5.223 ,  0.6999,  3.512 ,\n",
       "        7.061 ,  5.6545,  1.1475,  0.6126,  0.152 ,  3.5295,  0.5495,\n",
       "        1.183 ,  5.4945,  6.964 ,  4.873 , 22.6565,  5.7281,  0.4899,\n",
       "        4.604 ,  0.3508,  1.1389,  3.7495,  4.434 ,  8.6595,  5.991 ,\n",
       "        4.077 ,  4.046 ,  5.0145, 14.3785,  7.715 ,  5.89  ,  3.519 ,\n",
       "        3.3489,  0.6151,  4.8025,  2.562 ,  3.627 ,  0.478 ,  0.5739,\n",
       "        5.492 ,  0.2638,  1.6465,  2.852 ,  0.6663,  4.8595, 10.4399,\n",
       "        0.1788,  6.697 ,  4.697 ,  2.8625,  4.0905,  0.4913,  1.057 ,\n",
       "        0.6841,  8.463 , 10.2669,  0.5695,  8.572 ,  9.4675, 21.6169,\n",
       "        3.7085,  6.9825,  1.146 ,  1.573 ,  3.3005,  5.268 ,  0.4089,\n",
       "        9.019 ,  4.551 ,  5.158 ,  0.958 ,  3.8065,  0.2412,  2.096 ,\n",
       "        1.2703,  0.7775, 16.044 ,  7.6968,  4.0855, 11.4823,  2.9825,\n",
       "       16.0555,  3.9275,  0.7686,  2.1695,  0.2513,  0.4585,  0.4379,\n",
       "        5.8335,  4.5565,  2.5565,  5.0325,  0.7195,  0.2795,  6.6065,\n",
       "        7.2505,  0.5377,  6.5973,  0.3811,  9.0023,  0.1865,  6.0304,\n",
       "        1.1335,  6.8035,  7.197 ,  3.0175,  0.4293,  8.5125,  0.3734,\n",
       "        4.59  ,  2.2615,  0.2281,  3.5165,  4.1315,  6.117 ,  4.464 ,\n",
       "        9.4984, 11.455 ,  7.107 ,  0.2377,  5.3125,  0.2033,  1.1505,\n",
       "        1.5425,  0.3971])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rf=RandomForestRegressor(n_estimators=100)\n",
    "rf.fit(x_train,y_train)\n",
    "y_pre=rf.predict(x_train)\n",
    "display(y_pre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4dc1918-a97e-4155-b1ab-ed95e536167c",
   "metadata": {},
   "outputs": [],
   "source": [
    "result =  pd.concat ([dff, pd.DataFrame(y_pre,columns = ['Prediction'])],axis = 1 )\n",
    "print (result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae4ebd1a-4d50-4858-9df4-8a398ed2879e",
   "metadata": {},
   "source": [
    "# prediction on full data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a58766f1-120a-45c9-b767-79145134108c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3.7495,  5.158 ,  7.7133,  2.679 ,  4.5175,  8.6522,  6.697 ,\n",
       "        6.576 ,  7.5505,  7.107 ,  2.8535,  6.9825,  7.2196,  6.016 ,\n",
       "        2.339 ,  7.6968,  7.271 ,  7.6968,  3.2865,  2.65  ,  2.8165,\n",
       "        5.0715,  3.22  ,  2.562 ,  2.6665,  3.0175,  3.5365,  5.711 ,\n",
       "        2.1695,  7.314 ,  3.2275,  2.5565,  5.0325,  5.9515,  5.702 ,\n",
       "        3.3005,  4.604 ,  0.645 ,  2.9825,  2.2615,  5.8155,  2.5965,\n",
       "        2.096 ,  5.6545,  1.5545,  6.5254,  2.769 ,  1.5425,  5.89  ,\n",
       "        7.715 , 15.8025, 22.6565, 14.7459, 16.0555,  2.8196,  4.1158,\n",
       "        4.529 ,  5.268 ,  4.099 , 22.5625,  6.9015,  4.838 , 21.1395,\n",
       "       23.9375, 28.355 ,  4.551 , 14.7606,  8.6302,  4.697 , 14.3785,\n",
       "        4.1315,  5.08  ,  7.197 ,  2.8795,  5.321 ,  4.0875,  5.609 ,\n",
       "        2.3199,  5.492 , 16.044 , 13.5957,  5.1225, 21.6169, 11.3279,\n",
       "        4.0905,  3.519 , 31.079 ,  6.117 ,  3.5165,  4.022 ,  4.4355,\n",
       "        9.4675,  4.2231, 22.6565,  4.434 ,  5.991 , 20.507 , 15.5596,\n",
       "        6.964 ,  9.0023,  1.6465,  1.6345,  1.573 ,  1.4765,  1.4325,\n",
       "        1.2703,  2.4211,  1.184 ,  1.1721,  1.2005,  1.17  ,  1.17  ,\n",
       "        1.183 ,  1.1389,  1.1475,  1.1335,  1.0945,  1.1505,  1.1272,\n",
       "        1.146 ,  0.958 ,  1.057 ,  0.7643,  1.0488,  1.0275,  0.9505,\n",
       "        0.8525,  0.7195,  0.7686,  0.7096,  0.6999,  0.6663,  0.7775,\n",
       "        0.796 ,  0.6682,  0.5583,  0.6826,  0.4494,  0.6126,  0.6075,\n",
       "        0.6841,  0.6151,  0.5695,  0.5739,  0.4933,  0.5378,  0.5528,\n",
       "        0.5377,  0.478 ,  0.5495,  0.4949,  0.4379,  0.4894,  0.4962,\n",
       "        0.5452,  0.4663,  0.4728,  0.5195,  0.4699,  0.4501,  0.4529,\n",
       "        0.4814,  0.4899,  0.4585,  0.4436,  0.4293,  0.4339,  0.4666,\n",
       "        0.3757,  0.4089,  0.4913,  0.4076,  0.3971,  0.4077,  0.3734,\n",
       "        0.3085,  0.468 ,  0.3811,  0.3508,  0.3854,  0.2638,  0.3286,\n",
       "        0.2517,  0.2513,  0.2231,  0.2795,  0.2412,  0.2566,  0.2717,\n",
       "        0.1767,  0.1875,  0.2088,  0.2033,  0.2281,  0.297 ,  0.2377,\n",
       "        0.1788,  0.1865,  0.1707,  0.152 ,  0.1564,  2.5024,  4.5565,\n",
       "        2.8625,  2.852 ,  5.0705,  5.7281,  4.8025,  7.3064,  4.783 ,\n",
       "        3.095 , 11.455 , 11.3262,  2.9345,  4.8075,  4.873 ,  3.0655,\n",
       "        3.094 ,  6.178 ,  4.873 ,  3.5295,  3.807 ,  5.5425,  6.8005,\n",
       "        5.295 ,  2.9745,  4.5685,  2.489 ,  5.223 ,  3.251 ,  5.921 ,\n",
       "        9.019 , 11.4823,  3.7335,  4.9265,  8.947 ,  3.0655, 10.4456,\n",
       "        5.507 ,  2.3885,  5.2205,  4.552 ,  4.464 ,  6.0304,  5.8335,\n",
       "        5.2045,  3.205 ,  6.7265,  3.627 ,  5.4945, 11.7416,  5.3125,\n",
       "        5.2735,  5.766 ,  5.4415,  2.949 ,  9.823 ,  8.463 ,  8.572 ,\n",
       "        3.9275,  9.3743,  5.27  ,  4.046 ,  5.6935,  4.0855,  6.8035,\n",
       "        3.8065,  7.9475,  4.8595,  7.061 ,  4.1245,  3.2064,  7.2505,\n",
       "        2.4175,  5.1625, 10.2669,  8.6595,  9.4984,  6.3464,  6.6065,\n",
       "        5.163 ,  2.396 ,  6.718 ,  8.7991,  3.7085,  6.5834,  5.6255,\n",
       "        5.351 ,  8.5125, 10.0454,  4.59  ,  5.0145,  6.5973,  3.512 ,\n",
       "        3.939 ,  8.8454,  8.5173,  4.077 ,  3.3489, 10.4399,  5.237 ])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_rf=rf.predict(x)\n",
    "display(y_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d0678efd-206c-4e06-a52d-97876dc79b79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.7495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>5.1580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>7.7133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>2.6790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>4.5175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>8.5173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.0770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.3489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>10.4399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.2370</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  Prediction  \n",
       "0               1      0           3.35      3.7495  \n",
       "1               1      0           4.75      5.1580  \n",
       "2               1      0           7.25      7.7133  \n",
       "3               1      0           2.85      2.6790  \n",
       "4               1      0           4.60      4.5175  \n",
       "..            ...    ...            ...         ...  \n",
       "296             1      0           9.50      8.5173  \n",
       "297             1      0           4.00      4.0770  \n",
       "298             1      0           3.35      3.3489  \n",
       "299             1      0          11.50     10.4399  \n",
       "300             1      0           5.30      5.2370  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result =  pd.concat ([dff, pd.DataFrame(y_rf,columns = ['Prediction'])],axis = 1 )\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2104a05c-baa8-4e28-9ab0-a206246d93dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(y,y_rf)\n",
    "plt.xlabel(\"Actual price \")\n",
    "plt.ylabel(\"predicted price\")\n",
    "plt.title(\"actual prices vs predicted prices \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "31471b21-26f8-4c6d-a9ef-96b000187aa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(dff['Selling_Price']);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "760068a4-a574-4a8b-836f-995d2cea4061",
   "metadata": {},
   "source": [
    "# prediction on test data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c675a5e2-b2c8-4ef4-91d2-7083fa39dd8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pre=rf.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "273f4d9b-7a5a-4b9f-a411-f5ac641a53c7",
   "metadata": {},
   "source": [
    "# absolute and mean absolute error of test data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ced0f228-ee5d-4a53-bb3b-3f79c7ad5ddf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared error 0.9589376437699909\n",
      "mean absolute error 0.5879180327868854\n"
     ]
    }
   ],
   "source": [
    "error=metrics.r2_score(y_test,y_pre)\n",
    "print(\"r squared error\",error)\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "print(\"mean absolute error\",mean_absolute_error(y_test,y_pre))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1d727a22-ce59-4d2c-9ee5-060b740878dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABWgAAAJwCAYAAAAUUYg8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACjjElEQVR4nOzde3xldX3v//e67muykp3JTDLD3FG5zOBRQJiqdBQKjFaLQD0qp5Xq0dYO9AC19tCjVartWO3DC49DaY/2gPRI1VbBy6nQCjJoRX6FHoQRQRnnAkMyl1xWsq/r+vsjTpxMMplMJslOMq/n45HHY/Zae698MnlM8pn3/q7P10jTNBUAAAAAAAAAYM6ZzS4AAAAAAAAAAE5VBLQAAAAAAAAA0CQEtAAAAAAAAADQJAS0AAAAAAAAANAkBLQAAAAAAAAA0CQEtAAAAAAAAADQJAS0AAAAAAAAANAkBLQAAAAAAAAA0CQEtAAAAAAAAADQJAS0AHAMa9as0bXXXjut127evFmbN2+e0XpO1p133inDMLR79+5mlwIAAIBFhL4ZAE4OAS2ABesHP/iBPvKRj2hwcLDZpcwrf/EXf6F777232WUAAABgnqBvnhh9M4D5wkjTNG12EQAwHX/1V3+lP/qjP9KuXbu0Zs2aGb9+o9GQaZpyHOeEXxsEgSTJdd2ZLuu4isWirr76at15551jjsdxrDAMlclkZBjGnNcFAACA5qBvnhh9M4D5wm52AQAwF5IkURAEymazU35NJpOZ9udrRoN5PJZlybKsZpcBAACAeYy+mb4ZwNxjxAGABekjH/mI/uiP/kiStHbtWhmGMWZOlGEYuu666/TFL35RZ599tjKZjO677z5JIysIfuVXfkUdHR3K5XI699xz9U//9E/jPsfRs7QOz6L6t3/7N910003q7OxUoVDQW97yFh08eHDMa4+epfXQQw/JMAx95Stf0Z//+Z/rtNNOUzab1cUXX6znnntu3Oe+7bbbtG7dOuVyOb3qVa/S9773vSnN5zIMQ5VKRV/4whdG/04Ofw0TzdJas2aNfv3Xf10PPfSQzjvvPOVyOW3cuFEPPfSQJOlrX/uaNm7cqGw2q3PPPVf/7//9v3Gf85lnntHVV1+tUqmkbDar8847T9/4xjcmrRMAAABzg755YvTNAOYTVtACWJCuvPJK/fSnP9U//MM/6NOf/rSWLFkiSers7Bx9zoMPPqivfOUruu6667RkyZLR27k++9nP6s1vfrOuueYaBUGgL33pS/rN3/xNfetb39Ib3/jG437u66+/Xu3t7frwhz+s3bt36zOf+Yyuu+46ffnLXz7uaz/+8Y/LNE29//3vl+/7+sQnPqFrrrlGjz766Ohzbr/9dl133XV67WtfqxtvvFG7d+/WFVdcofb2dp122mmTXv/v//7v9V//63/Vq171Kr33ve+VJK1fv37S1zz33HN6xzveod/93d/Vf/kv/0V/9Vd/pTe96U36m7/5G/3Jn/yJfv/3f1+StG3bNr31rW/Vs88+K9MceX/vxz/+sV796ldrxYoV+u///b+rUCjoK1/5iq644gp99atf1Vve8pbj/p0AAABg9tA3T4y+GcC8kgLAAvXJT34ylZTu2rVr3DlJqWma6Y9//ONx56rV6pjHQRCkGzZsSF//+tePOb569er0ne985+jjO+64I5WUXnLJJWmSJKPHb7zxxtSyrHRwcHD02K/+6q+mv/qrvzr6+Lvf/W4qKT3zzDPTRqMxevyzn/1sKil96qmn0jRN00ajkXZ0dKTnn39+Gobh6PPuvPPOVNKYax5LoVAYU/fR9R/597V69epUUvqDH/xg9Nj999+fSkpzuVy6Z8+e0eN/+7d/m0pKv/vd744eu/jii9ONGzem9Xp99FiSJOmv/MqvpC95yUuOWysAAABmH33zxOibAcwXjDgAsGj96q/+qs4666xxx3O53OifBwYG5Pu+Xvva1+o//uM/pnTd9773vWM2C3jta1+rOI61Z8+e4772d37nd8bM2Xrta18rSfr5z38uSXrsscfU19en97znPbLtX97kcM0116i9vX1K9Z2os846S5s2bRp9fMEFF0iSXv/612vVqlXjjh+utb+/Xw8++KDe+ta3anh4WIcOHdKhQ4fU19enyy67TD/72c+0b9++WakZAAAAM4e+eWromwHMFkYcAFi01q5dO+Hxb33rW/rYxz6mJ554Qo1GY/T4VHdoPbL5kjTaAA4MDJz0aw83q6effvqY59m2PSs77k5Uk+d5kqSVK1dOePxwrc8995zSNNWHPvQhfehDH5rw2gcOHNCKFStmumQAAADMIPrmqaFvBjBbCGgBLFpHvuN/2Pe+9z29+c1v1kUXXaS//uu/Vnd3txzH0R133KG77757Stc91o6uaZrO6mtny7FqOl6tSZJIkt7//vfrsssum/C5RzfMAAAAmH/om6eGvhnAbCGgBbBgTfWd+yN99atfVTab1f33369MJjN6/I477pjJ0qZt9erVkkbeZX/d6143ejyKIu3evVvnnHPOca8xnb+X6Vi3bp0kyXEcXXLJJXPyOQEAAHDi6JsnRt8MYL5gBi2ABatQKEiSBgcHp/way7JkGIbiOB49tnv3bt17770zXN30nHfeeero6NDnPvc5RVE0evyLX/zilG4Fk0b+Xk7k72S6li5dqs2bN+tv//Zv1dPTM+78wYMHZ70GAAAAHB9988TomwHMF6ygBbBgnXvuuZKk//E//ofe9ra3yXEcvelNbxptQCfyxje+UZ/61Kd0+eWX6x3veIcOHDig2267TaeffrqefPLJuSr9mFzX1Uc+8hFdf/31ev3rX6+3vvWt2r17t+68806tX79+Su/yn3vuufrOd76jT33qU1q+fLnWrl07ulHBTLvtttv0mte8Rhs3btR73vMerVu3Tvv379cjjzyiF154QT/60Y9m5fMCAABg6uibJ0bfDGC+YAUtgAXr/PPP10c/+lH96Ec/0rXXXqu3v/3tx333+fWvf73+7u/+Tr29vbrhhhv0D//wD/rLv/xLveUtb5mjqo/vuuuu06233qq9e/fq/e9/v773ve/pG9/4htra2pTNZo/7+k996lM699xz9cEPflBvf/vbdfvtt89arWeddZYee+wxvfGNb9Sdd96prVu36m/+5m9kmqb+9E//dNY+LwAAAKaOvnli9M0A5gsjbeaEbQDAlCRJos7OTl155ZX63Oc+1+xyAAAAgHmJvhnAQsQKWgCYZ+r1+rjdae+66y719/dr8+bNzSkKAAAAmGfomwEsFqygBYB55qGHHtKNN96o3/zN31RHR4f+4z/+Q3/3d3+nM888U48//rhc1212iQAAAEDT0TcDWCzYJAwA5pk1a9Zo5cqVuvXWW9Xf369SqaTf/u3f1sc//nGaTAAAAOAX6JsBLBasoAUAAAAAAACAJmEGLQAAAAAAAAA0CQEtAAAAMM9t27ZN559/vlpaWrR06VJdccUVevbZZ8c8Z/PmzTIMY8zH7/3e7zWpYgAAAEzVoh9xkCSJXnzxRbW0tMgwjGaXAwAAsKClaarh4WEtX75cpsl7/XPl8ssv19ve9jadf/75iqJIf/Inf6IdO3bo6aefVqFQkDQS0L70pS/Vn/3Zn42+Lp/Pq7W1dcqfh94ZAABgZpxI37zoNwl78cUXtXLlymaXAQAAsKg8//zzOu2005pdxinjvvvuG/P4zjvv1NKlS/X444/roosuGj2ez+fV1dU17c9D7wwAADCzptI3L/qAtqWlRdLIX8aJrB4AAADAeENDQ1q5cuVoj4Xm8H1fklQqlcYc/+IXv6j/83/+j7q6uvSmN71JH/rQh5TP5495nUajoUajMfr48M119M4AAAAn50T65kUf0B6+Nau1tZUmEwAAYIZw+3vzJEmiG264Qa9+9au1YcOG0ePveMc7tHr1ai1fvlxPPvmk/viP/1jPPvusvva1rx3zWtu2bdMtt9wy7ji9MwAAwMyYSt+86GfQDg0NyfM8+b5PkwkAAHCS6K2a733ve5++/e1v6/vf//6kt8s9+OCDuvjii/Xcc89p/fr1Ez7n6BW0h1d68P0FAAA4OSfSNy/6FbQAAADAYnHdddfpW9/6lh5++OHjzjK74IILJGnSgDaTySiTycx4nQAAAJg6AloAAABgnkvTVNdff73uuecePfTQQ1q7du1xX/PEE09Ikrq7u2e5OgAAAJwMAloAAABgntu6davuvvtuff3rX1dLS4t6e3slSZ7nKZfLaefOnbr77rv1hje8QR0dHXryySd144036qKLLtI555zT5OoBAAAwGQJaAAAAYJ67/fbbJUmbN28ec/yOO+7QtddeK9d19Z3vfEef+cxnVKlUtHLlSl111VX64Ac/2IRqAQAAcCIIaAEAAIB57nj7+q5cuVLbt2+fo2oAAAAwk8xmFwAAAAAAAAAApyoCWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaBICWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaBICWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaBK72QUAAABg+tI0VSWIFcWJbMtUwbVkGEazywIAAADmlfncNxPQAgAALFB+LdSevor6y4GiJJVtGioVXa3uKMjLOc0uDwAAAJgX5nvfTEALAACwAPm1UDv2+ao0IrXnXbm2qSBK1OvXNVyPtGGFNy+aTQAAAKCZFkLfzAxaAACABSZNU+3pq6jSiNTt5ZR1LJmGoaxjqdvLqdKItLe/ojRNm10qAAAA0DQLpW8moAUAAFhgKkGs/nKg9rw74fn2vKu+4UCVIJ7jygAAAID5Y6H0zQS0AAAAC0wUJ4qSVK49cSvnWKaiJFUUJ3NcGQAAADB/LJS+mYAWAABggbEtU7ZpKIgmbiTDOJFtGrItWj0AAACcuhZK30zXDgAAsMAUXEuloquBajDh+YFqoI4WVwXXmuPKAAAAgPljofTNBLQAAAALjGEYWt1RUCFjq8evqR7GipNU9TBWj19TIWNrVakgwzCaXSoAAADQNAulb7ab+tkBAAAwLV7O0YYVnvb0VdRfDhQlqWzTUHdbVqtKBXk5p9klAgAAAE23EPpmAloAAIAFyss52rjCUyWIFcWJbMtUwbWavgIAAAAAmE/me99MQAsAALCAGYahYoaWDgAAAJjMfO6bmUELAAAAAAAAAE1CQAsAAAAAAAAATUJACwAAAAAAAABNQkALAAAAAAAAAE1CQAsAAAAAAAAATUJACwAAAAAAAABN0tSA9vbbb9c555yj1tZWtba2atOmTfr2t789er5er2vr1q3q6OhQsVjUVVddpf379zexYgAAAAAAAACYOU0NaE877TR9/OMf1+OPP67HHntMr3/96/Ubv/Eb+vGPfyxJuvHGG/XNb35T//iP/6jt27frxRdf1JVXXtnMkgEAAAAAAABgxhhpmqbNLuJIpVJJn/zkJ3X11Vers7NTd999t66++mpJ0jPPPKMzzzxTjzzyiC688MIpXW9oaEie58n3fbW2ts5m6QAAAIsevdXixvcXAABgZpxIXzVvZtDGcawvfelLqlQq2rRpkx5//HGFYahLLrlk9DlnnHGGVq1apUceeeSY12k0GhoaGhrzAQAAAAAAAADzUdMD2qeeekrFYlGZTEa/93u/p3vuuUdnnXWWent75bqu2traxjx/2bJl6u3tPeb1tm3bJs/zRj9Wrlw5y18BAAAAAAAAAExP0wPal73sZXriiSf06KOP6n3ve5/e+c536umnn5729W6++Wb5vj/68fzzz89gtQAAAAAAAAAwc+xmF+C6rk4//XRJ0rnnnqt///d/12c/+1n95//8nxUEgQYHB8esot2/f7+6urqOeb1MJqNMJjPbZQMAAAAAAADASWv6CtqjJUmiRqOhc889V47j6IEHHhg99+yzz2rv3r3atGlTEysEAAAAAAAAgJnR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l6aprrvuOt1zzz168MEHtXbt2jHnzz33XDmOowceeGD02LPPPqu9e/dq06ZNc10uAAAATgAjDgAAAIB5buvWrbr77rv19a9/XS0tLaNzZT3PUy6Xk+d5eve7362bbrpJpVJJra2tuv7667Vp0yZdeOGFTa4eAAAAkyGgBQAAAOa522+/XZK0efPmMcfvuOMOXXvttZKkT3/60zJNU1dddZUajYYuu+wy/fVf//UcVwoAAIATRUALAAAAzHNpmh73OdlsVrfddptuu+22OagIAAAAM4UZtAAAAAAAAADQJAS0AAAAAAAAANAkBLQAAAAAAAAA0CQEtAAAAAAAAADQJE0NaLdt26bzzz9fLS0tWrp0qa644go9++yzY56zefNmGYYx5uP3fu/3mlQxAAAAAAAAAMycpga027dv19atW/XDH/5Q//qv/6owDHXppZeqUqmMed573vMe9fT0jH584hOfaFLFAAAAAAAAADBz7GZ+8vvuu2/M4zvvvFNLly7V448/rosuumj0eD6fV1dX11yXBwAAAAAAAACzal7NoPV9X5JUKpXGHP/iF7+oJUuWaMOGDbr55ptVrVaPeY1Go6GhoaExHwAAAAAAAAAwHzV1Be2RkiTRDTfcoFe/+tXasGHD6PF3vOMdWr16tZYvX64nn3xSf/zHf6xnn31WX/va1ya8zrZt23TLLbfMVdkAAAAAAAAAMG1GmqZps4uQpPe973369re/re9///s67bTTjvm8Bx98UBdffLGee+45rV+/ftz5RqOhRqMx+nhoaEgrV66U7/tqbW2dldoBAABOFUNDQ/I8j95qkeL7CwAAMDNOpK+aFytor7vuOn3rW9/Sww8/PGk4K0kXXHCBJB0zoM1kMspkMrNSJwAAAAAAAADMpKYGtGma6vrrr9c999yjhx56SGvXrj3ua5544glJUnd39yxXBwAAAAAAAACzq6kB7datW3X33Xfr61//ulpaWtTb2ytJ8jxPuVxOO3fu1N133603vOEN6ujo0JNPPqkbb7xRF110kc4555xmlg4AAAAAAAAAJ62pAe3tt98uSdq8efOY43fccYeuvfZaua6r73znO/rMZz6jSqWilStX6qqrrtIHP/jBJlQLAAAAAAAAADOr6SMOJrNy5Upt3759jqoBAAAAAAAAgLllNrsAAAAAAAAAADhVEdACAAAAAAAA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tnr8muphrDhJVQ9j9fg1FTK2VpUKMgyj2aUCAAAAADAvNTWg3bZtm84//3y1tLRo6dKluuKKK/Tss8+OeU69XtfWrVvV0dGhYrGoq666Svv3729SxQCAo3k5RxtWeOrysqo0Ih0qN1RpROpuy2rDCk9ezml2iQAAAAAAzFtNDWi3b9+urVu36oc//KH+9V//VWEY6tJLL1WlUhl9zo033qhvfvOb+sd//Edt375dL774oq688somVg0AOJqXc7Rxhafz1pZ03pp2nbe2pA3LCWcBAAAAADgeI03TtNlFHHbw4EEtXbpU27dv10UXXSTf99XZ2am7775bV199tSTpmWee0ZlnnqlHHnlEF1544XGvOTQ0JM/z5Pu+WltbZ/tLAAAAWNTorRY3vr8AAAAz40T6qnk1g9b3fUlSqVSSJD3++OMKw1CXXHLJ6HPOOOMMrVq1So888siE12g0GhoaGhrzAQAAAAAAAADz0bwJaJMk0Q033KBXv/rV2rBhgySpt7dXruuqra1tzHOXLVum3t7eCa+zbds2eZ43+rFy5crZLh0AAAAAAAAApmXeBLRbt27Vjh079KUvfemkrnPzzTfL9/3Rj+eff36GKgQAAAAAAACAmWU3uwBJuu666/Stb31LDz/8sE477bTR411dXQqCQIODg2NW0e7fv19dXV0TXiuTySiTycx2yQAAAAAAAABw0pq6gjZNU1133XW655579OCDD2rt2rVjzp977rlyHEcPPPDA6LFnn31We/fu1aZNm+a6XAAAAAAAAACYUU1dQbt161bdfffd+vrXv66WlpbRubKe5ymXy8nzPL373e/WTTfdpFKppNbWVl1//fXatGmTLrzwwmaWDgAAAAAAAAAnrakraG+//Xb5vq/Nmzeru7t79OPLX/7y6HM+/elP69d//dd11VVX6aKLLlJXV5e+9rWvNbFqAAAAYO49/PDDetOb3qTly5fLMAzde++9Y85fe+21MgxjzMfll1/enGIBAAAwZU1dQZum6XGfk81mddttt+m2226bg4oAAACA+alSqejlL3+53vWud+nKK6+c8DmXX3657rjjjtHH7M0AAAAw/82LTcIAAAAATG7Lli3asmXLpM/JZDLH3EwXAAAA81NTRxwAAAAAmDkPPfSQli5dqpe97GV63/vep76+vkmf32g0NDQ0NOYDAAAAc4uAFgAAAFgELr/8ct1111164IEH9Jd/+Zfavn27tmzZojiOj/mabdu2yfO80Y+VK1fOYcUAAMytNE1VbkQarAYqN6Ipjd6cawuhRsw8RhwAAAAAi8Db3va20T9v3LhR55xzjtavX6+HHnpIF1988YSvufnmm3XTTTeNPh4aGiKkBQAsSn4t1J6+ivrLgaIklW0aKhVdre4oyMs5zS5P0sKoEbODgBYAAABYhNatW6clS5boueeeO2ZAm8lk2EgMALDo+bVQO/b5qjQiteddubapIErU69c1XI+0YYXX9AB0IdSI2cOIAwAAAGAReuGFF9TX16fu7u5mlwIAQNOkaao9fRVVGpG6vZyyjiXTMJR1LHV7OVUakfb2V5o6SmAh1IjZxQpaAAAAYAEol8t67rnnRh/v2rVLTzzxhEqlkkqlkm655RZdddVV6urq0s6dO/WBD3xAp59+ui677LImVg0AQHNVglj95UDteXfC8+15V33DgSpBrGKmOTHZQqgRs4vvKgAAALAAPPbYY3rd6143+vjw7Nh3vvOduv322/Xkk0/qC1/4ggYHB7V8+XJdeuml+uhHP8oIAwDAKS2KE0VJKtee+CZyxzIVJamiOJnjyn5pIdSI2UVACwAAACwAmzdvnvTWxvvvv38OqwEAYGGwLVO2aSiIEmUda9z5ME5km4Zsq3lTQBdCjZhdfGcBAAAAAACwKBVcS6Wiq4FqMOH5gWqgjhZXBXd8MDpXFkKNmF0EtAAAAAAAAFiUDMPQ6o6CChlbPX5N9TBWnKSqh7F6/JoKGVurSgUZhkGNaBpGHAAAAAAAAGDR8nKONqzwtKevov5yoChJZZuGutuyWlUqyMs5zS5xQdSI2UNACwAAAAAAgEXNyznauMJTJYgVxYlsy1TBtebVqtSFUCNmBwEtAAAAAAAAFj3DMFTMzO8obCHUiJnHDFoAAAAAAAAAaBICWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaBICWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaBICWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaBICWgAAAAAAAABoEgJaAAAAAAAAAGgSAloAAAAAAAAAaJIZCWiHhoZ077336ic/+clMXA4AAABYtOidAQAAcKRpBbRvfetb9T//5/+UJNVqNZ133nl661vfqnPOOUdf/epXZ7RAAAAAYCGjdwYAAMBkphXQPvzww3rta18rSbrnnnuUpqkGBwd166236mMf+9iMFggAAAAsZPTOAAAAmMy0Alrf91UqlSRJ9913n6666irl83m98Y1v1M9+9rMZLRAAAABYyOidAQAAMJlpBbQrV67UI488okqlovvuu0+XXnqpJGlgYEDZbHZGCwQAAAAWMnpnAAAATMaezotuuOEGXXPNNSoWi1q9erU2b94saeT2rY0bN85kfQAAAMCCRu8MAACAyUwroP393/99vepVr9Lzzz+vX/u1X5NpjizEXbduHXO0AAAAgCPQOwMAAGAyRpqmabOLmE1DQ0PyPE++76u1tbXZ5QAAACxo9FaLG99fAACAmXEifdW0VtDGcaw777xTDzzwgA4cOKAkScacf/DBB6dzWQAAAGDRoXcGAADAZKYV0P63//bfdOedd+qNb3yjNmzYIMMwZrouAAAAYFGgdwYAAMBkphXQfulLX9JXvvIVveENb5jpegAAAIBFhd4ZAAAAkzGn8yLXdXX66afPdC0AAADAokPvDAAAgMlMK6D9wz/8Q332s5/VIt9fDAAAADhp9M4AAACYzLRGHHz/+9/Xd7/7XX3729/W2WefLcdxxpz/2te+NiPFAQAAAAsdvTMAAAAmM62Atq2tTW95y1tmuhYAAABg0aF3BgAAwGSmFdDecccdM10HAAAAsCjROwMAAGAy0wpoDzt48KCeffZZSdLLXvYydXZ2zkhRAAAAwGJD7wwAAICJTGuTsEqlone9613q7u7WRRddpIsuukjLly/Xu9/9blWr1ZmuEQAAAFiw6J0BAAAwmWkFtDfddJO2b9+ub37zmxocHNTg4KC+/vWva/v27frDP/zDma4RAAAAWLDonQEAADAZI03T9ERftGTJEv3TP/2TNm/ePOb4d7/7Xb31rW/VwYMHZ6q+kzY0NCTP8+T7vlpbW5tdDgAAwIJGb3Xi6J0BAABOPSfSV01rBW21WtWyZcvGHV+6dCm3aQEAAABHoHcGAADAZKYV0G7atEkf/vCHVa/XR4/VajXdcsst2rRp04wVBwAAACx09M4AAACYjD2dF332s5/VZZddptNOO00vf/nLJUk/+tGPlM1mdf/9989ogQAAAMBCRu8MAACAyUxrBq00cqvWF7/4RT3zzDOSpDPPPFPXXHONcrncjBZ4spijBZwa0jRVJYgVxYlsy1TBtWQYxry/NgAsNPRW00PvDAAAcGo5kb5qWitoJSmfz+s973nPdF8OADPGr4Xa01dRfzlQlKSyTUOloqvVHQV5OWfeXhsAcOqgdwYAAMCxTDmg/cY3vqEtW7bIcRx94xvfmPS5b37zm0+6MACYCr8Wasc+X5VGpPa8K9c2FUSJev26huuRNqzwph2kzua1AQCLG70zAAAApmrKIw5M01Rvb6+WLl0q0zz23mKGYSiO4xkr8GRxmxaweKVpqqf2+er16+r2xt8i2uPX1N2W1Ybl3gmPJJjNawPAQkZvNTX0zgAAAKe2WRlxkCTJhH8GgGapBLH6y4Ha8+6E59vzrg4NN3RguKGMbZ7Q/NipXLtvOFAliFXMTHtaDABgkaJ3BgAAwFQd++38Sdx1111qNBrjjgdBoLvuuuukiwKAqYjiRFGSyrUn/lEWRImeO1jWv+/q12O7B/TYrn49tc+XXwtP+tqOZSpKUkUx/+kGAEyO3hkAAACTmVZA+zu/8zvyfX/c8eHhYf3O7/zOSRcFAFNhW6Zs01AQjQ9Jy41Iz+4f1lAtUmvWUWdLRoWMrV6/rh1TCGknu7YkhXEi2zRkW9P6MQoAOIXQOwMAAGAy00oW0jSd8BbhF154QZ7nnXRRADAVBddSqehqoBqMOZ4qVY9f08HhhtYtKagt78g0DGUdS91eTpVGpL39FU02gvtY1z5soBqoo8VVwbVm9GsCACw+9M4AAACYzAkNTnzFK14hwzBkGIYuvvhi2fYvXx7HsXbt2qXLL798xosEgIkYhqHVHQUN1yP1+DW15105lim/HmjXoYo6W1x1eblx/ymeyvzYY107jBMNVAMVMrZWlQpTmmebpqkqQawoTk5oDi4AYGGjdwYAAMBUnFBAe8UVV0iSnnjiCV122WUqFouj51zX1Zo1a3TVVVfNaIEAMBkv52jDCk97+irqLweKklT1MJKXc/SyrtYJA9ipzo+d6Nq2aai7LatVpYK8nHPc+vxaOO71paKr1R1Tez0AYOGidwYAAMBUnFBA++EPf1iStGbNGr3tbW9TJpOZlaIA4ER4OUcbV3ijq1QbUaKn9/lyjzEf9kTmxx597RNZAevXQu3Y56vSiNSed+XapoIoUa9f13A90oYVHiEtACxi9M4AAACYimnNoD3rrLP0xBNPjDv+6KOP6rHHHjvZmgDghBmGoWLGVlve1dKWjDpaMjM2P/bIaxcz9pTHGuzpq6jSiNTt5ZR1rBOegwsAWBzonQEAADCZaQW0W7du1fPPPz/u+L59+7R169aTLgoATsbh+bGFjK0ev6Z6GCtOUtXDWD1+7YTmx05XJYjVXw7UnncnPH/kHFwAwOJG7wwAAIDJnNCIg8OefvppvfKVrxx3/BWveIWefvrpky4KAE7WTMyPPRlRnChKUrn2xO+DTXUOLgBg4aN3BgAAwGSmFdBmMhnt379f69atG3O8p6dnzO60ANBMJzM/9mTZlinbNBREibLO+FEKJzIHFwCwsNE7A8DCkqZpU/4PAeDUNa1k4NJLL9XNN98s3/dHjw0ODupP/uRP9Gu/9mszVhwAnKzpzI+dCQXXUqnoztgcXADAwkXvDAALh18L9dQ+X4/t6tdjuwf02K5+PbXPl18Lm10agEVsWm/Z/9Vf/ZUuuugirV69Wq94xSskSU888YSWLVumv//7v5/RAgFgITo8B3e4HqnHr6k978qxTIVxooFqMCdzcAEA8wO9MwAsDH4t1I59viqNSO15V65tKogS9fp1DdcjbVjhzfqoNACnJiOd5hbilUpFX/ziF/WjH/1IuVxO55xzjt7+9rfLcebXD6uhoSF5niff99Xa2trscgCcYvxaOG4ObkeLOydzcAFgNtBbTQ+9MwDMb2ma6ql9vnr9urq93LjzPX5N3W1ZbVjuscgCwJScSF817aFXhUJB733ve6f7cknSww8/rE9+8pN6/PHH1dPTo3vuuUdXXHHF6Plrr71WX/jCF8a85rLLLtN99913Up8XAOZKM+fgAgDmj5nonQEAs6cSxOovB2rPuxOeb8+76hsOVAliFTPMDwcws6b8U+Ub3/iGtmzZIsdx9I1vfGPS5775zW+e0jUrlYpe/vKX613vepeuvPLKCZ9z+eWX64477hh9nMlkployAMwLh+fgAgBOHbPROwMAZk8UJ4qSVK498VY9jmUqSlJFcTLHlQE4FUw5MbjiiivU29urpUuXjlnlejTDMBTH8ZSuuWXLFm3ZsmXS52QyGXV1dU21TAAAAKDpZqN3BgDMHtsyZZuGgihR1hm/kW8YJ7JNQ7Y1rb3WAWBSUw5okySZ8M+z7aGHHtLSpUvV3t6u17/+9frYxz6mjo6OYz6/0Wio0WiMPh4aGpqLMgEAAIBRzeqdAQDTU3AtlYruMWfQDlQDdbdlVXDHh7cAcLLm9Vs/l19+ue666y498MAD+su//Ett375dW7ZsmXSVwbZt2+R53ujHypUr57BiAAAAAABwPGmaqtyINFgNVG5Emub+5TPGMAyt7iiokLHV49dUD2PFSap6GKvHr6mQsbWqVGAvCQCzwkin+FPw1ltvnfJF/+AP/uDECzGMcZuEHe3nP/+51q9fr+985zu6+OKLJ3zORCtoV65cyU60AAAAM+BEdqM9lc127zxb+P4CmAt+LdSevor6y4GiJJVtGioVXa3uKMjLOfOuto4WV6tKza8NwMJyIn3VlEccfPrTnx7z+ODBg6pWq2pra5MkDQ4OKp/Pa+nSpbPWZK5bt05LlizRc889d8yANpPJsJEYAAAAmmo+9M4AMB/5tVA79vmqNCK15125tqkgStTr1zVcj7RhhdfUINTLOdq4wlMliBXFiWzLVMG1WDkLYFZNecTBrl27Rj/+/M//XP/pP/0n/eQnP1F/f7/6+/v1k5/8RK985Sv10Y9+dNaKfeGFF9TX16fu7u5Z+xwAAADAyZoPvTMAzDdpmmpPX0WVRqRuL6esY8k0DGUdS91eTpVGpL39lXkx7qCYsdWWd1XM2ISzAGbdlEccHGn9+vX6p3/6J73iFa8Yc/zxxx/X1VdfrV27dk3pOuVyWc8995wk6RWveIU+9alP6XWve51KpZJKpZJuueUWXXXVVerq6tLOnTv1gQ98QMPDw3rqqaemvEqW27QAAABmDr3ViZup3nku8P0FMJvKjUiP7epXIWMr64zfbKsexqo0Ip23tqRiZso3/ALAvDQrIw6O1NPToyiKxh2P41j79++f8nUee+wxve51rxt9fNNNN0mS3vnOd+r222/Xk08+qS984QsaHBzU8uXLdemll+qjH/0oIwwAKE1TbjsCACwIM9U7A8BCF8WJoiSVa098M69jmYqSVFGczHFlANBc0wpoL774Yv3u7/6uPv/5z+uVr3ylpJEVAO973/t0ySWXTPk6mzdvnvTWhfvvv3865QFY5ObzpgIAABxtpnpnAFjobMuUbRoKomTCFbRhnMg2DdnWlKcxAsCiMK2fev/7f/9vdXV16bzzzhvdlOtVr3qVli1bps9//vMzXSMAjDq8qUCvX1chY6uzJaNCxlavX9eOfb78WtjsEgEAGIPeGQBGFFxLpaKrgWow4fmBaqCOFlcFd3x4CwCL2bRW0HZ2duqf//mf9dOf/lTPPPOMJOmMM87QS1/60hktDgCOdPSmAocd3lSgx69pb39FG5Z7jDsAAMwb9M4AMMIwDK3uKGi4HqnHr6k978qxTIVxooFqoELG1qpSgV4ewCnnpKZur1mzRmmaav369bJtBngDmF2VIFZ/OVB73p3wfHveVd9woEoQs6kAAGDeoXcGAMnLOdqwwhs3sqy7LatVJUaWATg1TWvEQbVa1bvf/W7l83mdffbZ2rt3ryTp+uuv18c//vEZLRAADmNTAQDAQkTvDABjeTlHG1d4Om9tSeetadd5a0vasNwjnAVwyppWQHvzzTfrRz/6kR566CFls9nR45dccom+/OUvz1hxAHCkIzcVmAibCgAA5iN6ZwAYzzAMFTO22vKuihmbsQYATmnTurfq3nvv1Ze//GVdeOGFY36Inn322dq5c+eMFQcARzq8qUCvXx8zg/awgWqg7rYsmwoAAOYVemcAAABMZlrLzA4ePKilS5eOO16pVHjXC8CsObypQCFjq8evqR7GipNU9TBWj19jUwEAwLxE7wwAAIDJTCugPe+88/R//+//HX18uLH8/Oc/r02bNs1MZQAwgcObCnR5WVUakQ6VG6o0InW3ZbVhBXOrAADzD70zAAAAJjOtEQd/8Rd/oS1btujpp59WFEX67Gc/q6efflo/+MEPtH379pmuEQDGOLypQCWIFcWJbMtUwbVYhQQAmJfonQEAADCZaa2gfc1rXqMf/ehHiqJIGzdu1L/8y79o6dKleuSRR3TuuefOdI0AMA6bCgAAFgp6ZwAAAEzmhFfQhmGo3/3d39WHPvQhfe5zn5uNmgDgpKRpyupaAMC8QO8MAACA4znhFbSO4+irX/3qbNQCACfNr4V6ap+vx3b167HdA3psV7+e2ufLr4XNLg0AcAqidwYAAMDxTGvEwRVXXKF77713hksBgJPj10Lt2Oer16+rkLHV2ZJRIWOr169rByEtAKBJ6J0BAAAwmWltEvaSl7xEf/Znf6Z/+7d/07nnnqtCoTDm/B/8wR/MSHEAMFVpmmpPX0WVRqRuLzd6POtY6vZy6vFr2ttf0YblHuMOAABzit4ZAAAAkzHSNE1P9EVr16499gUNQz//+c9PqqiZNDQ0JM/z5Pu+Wltbm10OgFlSbkR6bFe/ChlbWccad74exqo0Ip23tqRiZlrvTQEARG81HfTOAAAAp54T6aumlVLs2rVr9M+H811WpAFopihOFCWpXHviyS2OZSpKUkVxMseVAQBOdfTOAAAAmMy0ZtBK0t/93d9pw4YNymazymaz2rBhgz7/+c/PZG0AMGW2Zco2DQXRxAFsGCeyTUO2Ne0fewAATBu9MwAAAI5lWito//RP/1Sf+tSndP3112vTpk2SpEceeUQ33nij9u7dqz/7sz+b0SIB4HgKrqVS0VWvXx8zg/awgWqg7rasCu748QcAAMwmemcAAABMZlozaDs7O3Xrrbfq7W9/+5jj//AP/6Drr79ehw4dmrECTxZztIBTh18LtWOfr0ojUnvelWOZCuNEA9VAhYytDSs8eTmn2WUCwIJGb3Xi6J0BAABOPbM+gzYMQ5133nnjjp977rmKomg6lwSAk+blHG1Y4WlPX0X95UBRkso2DXW3ZbWqVCCcBQA0Bb0zAAAAJjOtYYy/9Vu/pdtvv33c8f/1v/6XrrnmmpMuCgCmy8s52rjC03lrSzpvTbvOW1vShuWsnAUANA+9MwAAACYzrRW00shGB//yL/+iCy+8UJL06KOPau/evfrt3/5t3XTTTaPP+9SnPnXyVQLACTAMQ8XMtH+8AQAw4+idAQAAcCzTSjB27NihV77ylZKknTt3SpKWLFmiJUuWaMeOHaPPMwxjBkoEAAAAFq6Z6p0ffvhhffKTn9Tjjz+unp4e3XPPPbriiitGz6dpqg9/+MP63Oc+p8HBQb361a/W7bffrpe85CUz/0UBAABgxkwroP3ud78703UAAAAAi9JM9c6VSkUvf/nL9a53vUtXXnnluPOf+MQndOutt+oLX/iC1q5dqw996EO67LLL9PTTTyubzc5IDQAAAJh53AMMAAAALABbtmzRli1bJjyXpqk+85nP6IMf/KB+4zd+Q5J01113admyZbr33nv1tre9bS5LBQAAwAmY1iZhAAAAAOaPXbt2qbe3V5dccsnoMc/zdMEFF+iRRx455usajYaGhobGfAAAAGBuEdACAAAAC1xvb68kadmyZWOOL1u2bPTcRLZt2ybP80Y/Vq5cOat1AgAAYDwCWgAAAOAUdfPNN8v3/dGP559/vtklAQAAnHIIaAEAAIAFrqurS5K0f//+Mcf3798/em4imUxGra2tYz4AAAAwtwhoAQAAgAVu7dq16urq0gMPPDB6bGhoSI8++qg2bdrUxMoAAABwPHazCwAAAABwfOVyWc8999zo4127dumJJ55QqVTSqlWrdMMNN+hjH/uYXvKSl2jt2rX60Ic+pOXLl+uKK65oXtEAAAA4LgJaAAAAYAF47LHH9LrXvW708U033SRJeuc736k777xTH/jAB1SpVPTe975Xg4ODes1rXqP77rtP2Wy2WSUDAABgCow0TdNmFzGbhoaG5HmefN9nphYAAMBJorda3Pj+AgAAzIwT6auYQQsAAAAAAAAATUJACwAAAAAAAABNQkALAAAAAAAAAE1CQAsAAAAAAAAATUJACwAAAAAAAABNQkALAAAAAAAAAE1CQAsAAAAAAAAATUJACwAAAAAAAABNQkALAAAAAAAAAE1CQAsAAAAAAAAATUJACwAAAAAAAABNYje7AADzQ5qmqgSxojiRbZkquJYkjTtmGEaTKwUAAAAAAFg8CGgByK+F2tNXUX85UJSksk1DrmPKkKFGGI8eKxVdre4oyMs5zS4ZAAAAAABgUSCgBU5xfi3Ujn2+Ko1I7XlXrm1qoBLo33f1S5LOOa1NnS0ZBVGiXr+u4XqkDSu8CUPaiVbhsuIWAAAAAADg2AhogVNYmqba01dRpRGp28uNHhuoBso5tgwj1WAtUEfRVdax1O3l1OPXtLe/og3LvTHh60SrcFlxCwAAAAAAMDkCWuAUVgli9ZcDtefd0WO1MJZfDdWaG/nx4FdC1dpi5Z2Rx+15V33DgSpBrGLmF8+ZYBXuVFbcAgAAAAAAnOrMZhcAoHmiOFGUpHLtX/4oiJNUUZrKsUzZpqkoTRXH6eh5xzIVJamiOJE0fhVu1rFkGsboittKI9Le/orSNB33+QEAAABMX5qmKjciDVYDlRsRPTcALFCsoAVOYbZlyjYNBVGirGNJkizTkG0YCn8RwNqGIcv65SiDME5km4ZsayTUnWgV7pEmWnELAAAA4OQwYgwAFg/SEuAUVnAtlYquev366AzanGPJyzs6OBzIMFItacko94vwVpIGqoG627IquCPHJlqFe6SjV9wCAAAAODnHHTG2vFWWZbJ5LwAsEAS0wCnMMAyt7ihouB6px6+pPe/KsUy1513t7a9KktpyrpJECuNYA9VAhYytVaXCaIM30SrcIx294hYAAADA9E200a+k0RFjOw+W9eAzB9SWcxSnYmUtACwAJCbAKc7LOdqwwlOXl1WlEelQuSFJetW6kl61tkOGpEPlxkgD2JYdt+HX4VW4A9VgwusPVAN1tLijK24BAAAATN9kI8bKjUj9lUA/P1SRZZrqbMmokLHV69e1Y58vvxY2oWIAwPGwghaAvJyjjSs8VYJ4zG1QksYdO/rWqGOtwg3jZMIVtwAAAACm71gjxlKl6vFrCuNYXs6RbRljNu/t8Wva21/RhuUevTkAzDMEtAAkjQStE23iNZWNvQ6vwj16k4LutqxWlbiVCgAAAJgpxxoxVgtjDVVD5RxbSZLKMseGsGzeCwDzFz+VAcyIY63C5d15AAAAYOZMtNGvJMVxqihNFYeJlh610a/E5r0AMJ8R0AKYMcdahQsAAABgZhxzxFiSyK+Fas876vJy4xZKsHkvAMxfJCkAAAAAACwgE40Ys0xp3ZKCDGPiMWUD1UDdbVk27wWAeYiAFgAAAACABWaiEWNRnOjHLw6xeS8ALDAEtMApLE3TMQ1d3jFVDRNmyAIAAAALwEQjxti8FwAWHgJa4BTl18IxjVsjjNWIY7m2paxtyTYNlYquVnfQyAEAAAALBZv3AsDCQ0ALnIL8Wqgd+3xVGpHa866CONHe/ooODgfqbMnoZV0tci1TvX5dw/VIG1Z4hLQAAADAAsHmvQCwsLB9I3CKSNNU5UakgUpDP+nxVa6H6vZyytimDgzVFcXSS5e1KE4SHRiuK+OY6vZyqjQi7e2vKE3TZn8JAAAAAAAAiw5vqQGngCPHGQw3Qu06WNHS1qxac5FMQ/KroVpzIz8OWrKO/EqoWlusvGOrPe+qbzhQJYh5Fx4AAAAAAGCGsYIWWOQOjzPo9esqZEYCV9sy5ddC7TxQ1lAtVJSmcqyRHwe2aSpKU8XxyIpZxzIVJamiOGnmlwEAAAAAALAosRwOWIDSNJ3S0P80TbWnr6JKI1K3l5MkJUqVdyxlXUtDtUiHyg1ZksI4Uca2FCWJbMOQZY1cL4wT2aYh2+L9HAAAAAAAgJlGQAssMEeOK4iSVLZpqFR0tbqjMG4jr0oQq78cqD3vjh7LOZZa8476yg215hzVgmg0rO1ssTRcD7WkJaOcY0mSBqqButuyKrjWnH6dAAAAAAAAp4KmLol7+OGH9aY3vUnLly+XYRi69957x5xP01R/+qd/qu7ubuVyOV1yySX62c9+1pxigXng6HEFnS0ZFTK2ev26duzz5dfCMc+P4kRRksq1f/lP3ZChbi+nnGvLrwWqhYnaCxnZlvTT/cOyTFNLi1k1wkQ9fk2FjK1VpcKEK3QBAACAU83hzXcHq4HKjYjNdAEAJ62pAW2lUtHLX/5y3XbbbROe/8QnPqFbb71Vf/M3f6NHH31UhUJBl112mer1+hxXCjTf0eMKso4l0zCUdSx1ezlVGpH29lfGNIi2Zco2DQXR2PmxxYyt9Z1FteackRA3TrSsJauXdhW0tDWjWhiPfJ62rDas8MatzAUAAABORX4t1FP7fD22q1+P7R7QY7v69dQECyUAADgRTR1xsGXLFm3ZsmXCc2ma6jOf+Yw++MEP6jd+4zckSXfddZeWLVume++9V29729vmslSg6SYaV5CmqWphrDhJlbUtHRpqqLIkVjEz8k+74FoqFV31+vXRGbSHFTO2SnlX6ztb9JKlBTm2pbxjqhomx51tCwAAAJxqDt/NVmlEas+7cm1TQZSo169ruB6xsAEAMG3zdgbtrl271Nvbq0suuWT0mOd5uuCCC/TII48cM6BtNBpqNBqjj4eGhma9VmAuHD2uoNyI1OvX5FdDRWkqQ1KaSuuXFUcDWsMwtLqjoOF6pB6/pva8K8cyFcaJBqqBillHL+tqGdNIFjNsBgYAAAAcaaLNdyWN3s3W49e0t7+iDcu9k17gMNUNgQEAi8e8DWh7e3slScuWLRtzfNmyZaPnJrJt2zbdcssts1ob0AxHjiuIklQ7D5RVDWK15mw5lqlKI9LBckM/3V+Wl3NHQ1cv52jDCm/cxmLdbVmtKo3fWAwAAADAWBPdzXak9ryrvuFAleCXd7NNx4lsCAwAWDzmbUA7XTfffLNuuumm0cdDQ0NauXJlEysCZsbhcQU9gzVVg1jVIFZnS2b0fCOKta6zoDhOxr177+UcbVzh8U48AAAAMA0Tbb57JMcyFSWpojiZ8PxUMEIBAE5d8/Ze5q6uLknS/v37xxzfv3//6LmJZDIZtba2jvkAFoPD4wos09TPD1WUdUzFSapGFOtQua6ca6urNadSITP67v3Rry9mbLXlXRUzNuEsAAAAMEXH2nz3sDBOZJuGbGt6/8WezobAAIDFY94GtGvXrlVXV5ceeOCB0WNDQ0N69NFHtWnTpiZWBsydNE1VbkQarAYqNyK1Zm29tKtFrTlbUZxosBaoHsRa0pLR+s6R2bMz8e49AAAAgF86fDfbQDWY8PxANVBHi6uCa03r+icyQgEAsPg0dcRBuVzWc889N/p4165deuKJJ1QqlbRq1SrdcMMN+tjHPqaXvOQlWrt2rT70oQ9p+fLluuKKK5pXNDBHjjV/akkxo9M7izJNQ45pyrIM5RxLhkZWxJ7Iu/dsQAAAAAAc3/E23y1kbK0qFabdS8/FCAUAwPzV1ID2scce0+te97rRx4dnx77zne/UnXfeqQ984AOqVCp673vfq8HBQb3mNa/Rfffdp2w226ySgRkzWTg62fypoVqojGOpXI9U8jLjrjtQDdTdlj3uu/dsQAAAAABM3WxuvnvkCIWsM76PP9kRCgCA+c1IF/kQm6GhIXmeJ9/3mUeLeWOycLQ1a+upfb56/bq6vdy41/b4NbVkHcVJomoQT/ju/fE2EDhWADzV1wMATl30Vosb31/gl461oGI27kJL0/S4/wfobsuO2QgYADC/nUhf1dQVtMCp6Hi7s65dUjju/KlKI9JLu1p0qNw44Xfvj96A4LDDGxD0+DXt7a/Q/AEAAOCUdby7zYqZmf2v9GyPUAAAzG8EtMAcmko4uruvrDBOjjt/Ku9a2rjCO+F3709kA4KZbjwBAACA+e54Cypm626z2RyhAACY30hfgDk0lXD0ULkhGZrS/CnDME44RGUDAgAAAGBizb7bzMs501qEAQBY2JgwDsyhqYSjtmnIyzoaqAYTPmegGqijxT3uJmDHcuQGBBNhAwIAAACcqk7kbrPZcngRRlveVTFjE84CwCmABAaYQxOFo2maqhpEGq6HGqqFsk1Da5YUlHct7TpU1sHhusqNULVwZB7Vyc6fKriWSkV31gJgAAAAYKHibjMAQDMw4gCYQ4fD0V6/rq7WrA6VG3pxsKZyI5ZlSkP1SOs684qTRKZpqK8caOfBspRKbXlHZ3R7Omt560nNn2IDAgAAAGBiRy6oON64MQAAZgoBLTAL0jSdcG7U4XC016/roZ8e0IuDdUVRooxrybEMdRYzqgWJ/vmpXi1rzers5a2K01S1IFa5ESlOZuadejYgAAAAAMY7ckHFkTNoDxuoBupuy3K3GQBgRhHQAjPMr4Xjgs9S0dXqjl8En2mqWjCyerXaiLWk6CpNDcmQHMtQmkqD1VBLWzPKupYMGSpmHHW2aEY3JWADAgAAAGAs7jYDADQDAS0wg/xaqB37fFUakdrzrlzbVBAl6vXrGq5HWlnK6bHd/Xq2t6w0kVpyjjKurc6iq7a8qxcHqzrYV9HK9pz8SqhaW6y888t/pkduSlDMnPw/38MbEAAAAAAYMdN3mx3r7joAAA4jmQFmSJqm2tNXUaURqdvLKU1T1cJYcZLKyzl6cbCqZ3p8DVRDtecdBXGivGOpFsY6WA6UsS3lXVsv9NdklPKK0kRxnEpH9H9sSgAAAADMvpm628yvhdp9qKwXB+tqRIkytqnlbVmtWVJkrBgAYBQBLTBDKkGs/nKg9ryrciNSr1+TXw0VpaksQ+qrBBqqh1rWmlVL1lFfOZBpGPJyjg6WG3phMNWSQmbkWo1IWduSZY1tANmUAAAAAJgbJ3u3mV8L9ejP+7S7r6I0lUxDSlLp+YGq9g81dMG6DkJaAIAkiZQHmCFRnCiME/m1UE+9MKgXBmrKOKba865Mw9D+obqG67EaYSLTkFqytvorgQ4M1TVYDbVzf1k7D5ZVD2PtG6jJKzjKHbVz7EA1UEeLy6YEAAAAwDyWpql+/KKvn/QMSenIooxSIfOLPSkM/aRnSE/3+ErTtNmlAgDmAVbQAjOkGsTa21fRz/uqGq5Fas87SpJEnS1ZWZapnGOrFkRK0kRDtUh519ZQvaxKI1JrzpHhmGqEsZJ0ZKVsNRgJc9mUAAAAAJjYbMx3nYlrlhuRnu0Zlm0a6mzJjB7P2JY6Wyy9OBjr2ReHtWG5p5Ysq2gB4FRHQAvMgMOrZn/eX9aug1UVM5Z6h2IdGK5rsBZqZXtejShWqcVVPuPIMqV9flU5x1IhY8mvRRquhzqtPadz17RJknKuqXIjVJzopDYlAAAAABYjvxaO28irVHS1umP6PfOR1wzjRFGSqjVna+2Sorq97JSD2qFaqMFaoGWt2QnPt+VdHRiua6gWEtACAAhogZN1+PalZ3qHlbFtRWmiwWosy7QUp6kOVQKV66FKxYzyji3XMrW0JaMDQ3XlM7ZMpQqiRGuXeDp3dUmdxYwaUaJyPdRZyz1lbJPdXgEAAIAj+LVQO/b5qjQiteddubapIErU69c1XI+0YYV3wiHtkdd0LVND9VCHyoGGaqGeeN7XK1e166zlrVO/7iTTCwxj8vMAgFMLM2iBk3T49qUoSWVIyju2CllHGduUa5uqB5H2+Q2t6yyoJevIr4WyTEMdxYxWl3Jqy7s6e7mn15zeqaUtI+/KO5apOJUytqm2vKtixiacBQAAADSyQGJPX0WVRqRuL6esY8k0DGUdS91eTpVGpL39lROa73rkNVuyjl4YqKmvHMrLOVrXWZTSVE/tG9RTLwzKr4XHvV5rzlFb3tFAJZjw/EAlUHvBUSt3xwEAREALnLShWqiBaqAkTZQk0vK2nIoZR0u9rLq8nNYvLcqUVP7FXNp1SwoyJFXDWGGUamVHXmcdNXsqjBPZpiHb4p8oAAAAcKRKEKu/HKg97054vj3vqm84UCWIT/iabTlHvX5N1SBWZ0tGGXsk/O0oZuSapvorwZTC32LG1hndnqIk1aFyXY0oVpykakSxDpXripJUL+vyVMxwUysAgBEHwIwIkkT1eqxizlHOtRTEqephrKxjyTZN2aahvQM1rV5S1Plr2mWahtryrg6VG1qzpCBDY1fHDlQDdbdlVXCtJn1FAAAAwPwU/WI2rGtPvJjBsUxFSaooTk74mnGayq+Gas2N/a+ybZqK0kjFjD0a/k4WrhqGobOWt2q4Hmr3oYqGquHI8qhEkimd2d2qs5a3cpccAEASAS1w0lpzjlozjvYP1tVWdGVqZMbsYDVQLYg1WA2UsU11trh6aVeLvF+803/2Ck879vnq9etqz7tyLFNhnGigGqiQsbWqVKBhAwAAAI5iWyMLIIIoUdYZv6BhOnejHb5mLYgVpamco14bJYlsw1DOtVRpxFMKf72cowvWdWhZa0Yv+nU1wkQZx9SKtqxWdxTZ/BcAMIqAFjhJxYytM7pa9NP9w+orN+TlXLmWqVLB1aAZyjIMrV9W0MuWtahU+OVtWF7O0YYV3ridZ7vbslpVmv7OswAAAMBiVnAtlYquev26ur3cuPPTuRvt8DV3H6rINgyFcaKM/cvXD9dDLWnJyDKNEwp/vZyjc05r0/qlI6Eum/8CACZCQAucJMMwdO7qdj13sKyf9g7LNn55+5JjGVrd3aLOlow6W8c3iV7O0cYVnioBDRsAAAAwFYZhaHVHQcP1SD1+bUbuRjt8zaFaqN6huirlSMtac4qSRMP1UDnXVldrToPV8ITDX8MwmDULAJgUvyWAGeDlXW3Z0CVD0r6BmjK2KS/rqpR3lHUtdbZkj9kk0rABAAAAJ2Y27kbzco42ntYm0zT0xJ5B7TpUlpd11NHiqlTIaLgeMooMADArSIWAGeDXQg1UQ3W3ZhVEicqNSIkSFbK21iwpMLIAAAAAmGGzcTeal3O0aV2H1nQUtPtQRX49lG2MbOnLKDIAwGwhoAVOkl8LtWOfr0oj0jIvp9NKeQ3VIvVVGso5tla252niAAAAgFkwG3ejGYah5W05dXtZRpEBAOYEAS0gKU3TYzZfxzu3p6+iSiMas0FBe8FVe8FVj1/T8wNVeTmHZg4AAABYQBhFBgCYK/y2wSnPr4XjZleViq5WdxQkSbsPlfXiYF2NKFHGNrW8Las1S4ryco4qQaz+cqD2vDvhtdvzrvqGA1WCmOYOAAAAAAAA45AY4ZR25HiC9rwr1zYVRIl6/bp6/bqqQaQDww2lqWQaUpJKzw9UtX+ooQvWdShNU0VJKtc2J7y+Y5mKklRRnMzxVwYAAAAAAICFYOJUCTgFHD2eIOtYMg1DWcdSV2tWz/QO6dFd/VI6sllAqZAZmSWbGvpJz5Ce7vFlmYZs01AQTRzAhnEi2zRkW/xTAwAAAAAAwHikRjhlTTaeoBpE6i8HCoNELTlbGXskvM3YljpbMrJNQ8++OKw0TVUquhqoBhN+joFqoI4WVwXXmu0vBwAAAAAAAAsQIw5wyori5JjjCSqNWLUwVi5raaLpBG15VweG6xquR1rdUdBwPVKPX1N73pVjmQrjRAPVQIWMrVWlAhuEAQAAAPPQZBsCAwAwVwhoccqyLXN0PEHWGb/CNU5SWTI00XQCw5CUjvzZyznasMIbt9FYd1tWq0qFkbEIAAAAwClqvoagk20WTA8PAJhLBLQ4ZRVcS6Wiq16/ri4vq1oYK45TmaYhw5CiJFU9juUekdCmStWIYvUM1lTMOmrJjvwT8nKONq7w5mXjCQAAADTLXIWgJxoCT7ZZ8HA90oYVHiEtAGDOENDilGUYhlZ3FNTr1/XDnX1SKtXiWAPlhiqNSGEYq1yP9P/2DmrdkoJc21LvUE0HhxuqB7HO6G7RrkMVrVliyMs5MgxDxQz/pAAAAABp7kLQEw2Bj94s+LCsY6nby6nHr2lvf0UblnssuAAAzAnSJECSDKkWxto/VNdQNVAQJ7ItS5aRatfBsvYNVNWSdeRYhgqurXUrinrZshbtH2qo3Ih5hx0AAAA4wlyFoNMJgSfbLFiS2vOu+oYDVYKYBRgAgDkxwXRN4NRwuGmUpAvWltTZklHOMWUaI3Np/WogSepuy2qoFupQuaGVpbxesbpd55zWpo5iRt1eTpVGpL39FaVp2swvBwAAAJhxaZqq3Ig0WA1UbkRT7nlPJAQ9mdqODIGzjiXTMEZD4GP16ZNtFixJjmUqSlJFE+0WDADALODtQCx6x5pHdWTTWI8S+ZVAPX5dB4Ybyjm2ZKQaqAVKlKqYsZRzbbXlXK1bUpBp/rKZ4x12AAAALEYnMz92LkLQ6a6EPd5mwWGcyDYN2RPtFgwAwCwgTcKidmRTGf6iSWzN2Vq7pKisbajciGRbhupBrF39ZfX4DeVdUxnHlClT1TBWnEh+I5brWKoEkepRorz7y2aNd9gBAACw2ExndMCRCyMaUSLL0KyGoNMNgY/cLPjI8QuHDVQDdbdlVXDH1w0AwGwgoMWidWRT6VqmhuqhDpUD+bVA3/vZQRUztvxqqPaCqyBOtOtARVGcqCWTkQxDUTLSNHo5RwPVQIPVUI0wVpyMvUWKd9gBAACwmExnfuzRq20tUxqoBfLrodZ3toz7HDMRgk53JezhzYKH65F6/Jra864cy1QYJxqoBipkbK0qFdggDAAwZwhosSgd2VS2ZB3tPFBWNYjlWqbSVPrxviHFSapCxlK5EWtpS1b1aOSd/noUK+vYaoSJChlLWddU1rFUrocyDEOWObZR4x12AAAALCYnOjrgWKtt/Vqk/UN1SdKKtvyMh6AnsxLWyznasMIbN8Khuy2rVaXjj3AAAGAmEdBiUSo3Iu0bqCljmdp9qKxKI1Ixa+v5gapeHKgq79rKuSNjDPqrgSqNUC1ZW1ElVO9QXaWCq4xtKedYqjRiteUcBVGiKE1kSIqTlHfYAQAAsChNdXRAGMUaTlP9eJ+vvnJDa5YUZGikJ846ltZ3FiVJSZroYLmuIEqVcUytaMtqdUfxpEPQk10J6+UcbVzhTbhfBQAAc4mAFgvOsTb9OsyvhfrxPl/P9A7JMQ31DNbVVnQ0WAtUboQyTVOtOVNBHKvU4qoY2qqHkdJUKmZtlRuRgjBR0bWVKlXWsRTFiU5fWtQrVrarGsQaqke8ww4AAIBFaSqjA+pRrGf3D2ugEuqZ3iEVHFtRkqrby43ZkMvLOdp1aFjt+cxIz55KaTruktN2sithDcNgo18AQNPxmwgLyvF2kj18e1VfuaGCY8uyJMs2NFgJdXC4MTJvNhqZRWXKkGsaSi1Dq0tFmaahaiNSlEhLiq4SpYriVGk6chvX685cpte/rFPVMOEddgAAACxaxxsdsG+wpnIjlGMaytimihlbhYytvnJD1SDW+s6iipmRhQ/PD1TVVw61pqOojmJGQZRo/1BD5UY84UZj08FKWADAQkdAiwVjsp1kh2qh1i4paPehivb5NS33sio3IvWXGzJkqhI0dGC4ruFGrDRJNGgaWt6Wk2kaMg1DGcfRae151cNYB4cbWlLMyDClOE5lW6ZeurSo89eUZJqmihk2AwMAAMDidXh0wFAt1K5DZRUztnKuJcs0NFAJNFwfGQ+2vC2vahDJMU2ZhqElxawOlevqHapp3ZKCevyahmuhOosZFTK2TMOYdKOxk62ZlbAAgIWK32BYECbbSbYl6+ipfYN6bE+/egbrUprqmZyjll9sWPD8QEVBlCrn2lKaKJVUCxIFcaKBSqiu1qwsUyq6tpYUXa3rLCjrWDM+IwsAAABYSEzTUF850M6DZSmV2vKOVncUVMq7WtqalSTlHEte3tHB4UBLWkw5tqmewZpyjiW/GkiSvLyj3FGjEo7eaAwAgFMZvwmxIBxrJ9lyI9LOA2UN10LtG6gpUaplLVkFcaJKI1KlEctIDeUcQ/3VQEGYau2SgqIk0cGhhkxPasu1qL8SyLFNnd5e1IYVnmzL5PYoAAAAnJKOvHPt7OWtitNUtSAe2ashihWnv9xAzDAMdXk5HSo39NS+QSVJqkoj1lAtVF850OnLWtTl5cb104c3GovipBlfIgAA8woBLRaEiXaSTdNUvX5NlUYkyzCVKFVr1pVrWypkHB0o1xXFibrbs8ralpa15rS3vyrDkNpzrooZW0Gcau9AVW0FVxtXtOms5a2slAUAAMAp61h3rhUzjjpbpF2HyuovB+pqzY7coTbKkJFKcSJZpiHbNmWahuJk4gA2jEf2hbAtxocBAMBvQywIR+4kK400jv2VQD1+XYaRarAWqC3rqCVnqRxEkqSsbaoSRMrZtkwZWtaa0eaXLdW5q9u1qiOv9Z0FdXlZnb+2XW95xQpduK5EOAsAABasj3zkIzIMY8zHGWec0eyysMAc6861w7q8rFKl6h2qS5JSperxa5JSbVjRpmWtWW1c4enV65foVWtLGq7H6hmsqtIINVwPVQ0ipWmqgWqgjhZXBdea8PMAAHAqYQUtFoQjd5JtyTrq9WvqGaxrV39FWdPQi0N1vXRZi5Z7eb0wUNNALZBtGkqTVI04Vi2ItaQlozO7W1XIWKqFsSr1SI040ab1S9SSJZgFAAAL39lnn63vfOc7o49tm3YfJ2aiO9eO5FqW2osZZWxLPX5NGcfUYCVQxrZ06BfB7vqlRRUztpa3Gdo/1NCju/p1WlteGcdUKskwpDUdBa0qFRglBgCACGixQBzeSbbXr+v/29Un2zSUcyzlHUvlRqg4SVVujKycXdk+MgOrvxpIhjRYDdXVktXpv2gUJSnv2PKroU5rz7EpAQAAWDRs21ZXV1ezy8ACk6apKkGsKE7UiBJZphREibLO+NWtYZyoLevopV0tOlRuaG9fRf2VUKWio84WV13e2P7aMgzFaao4TWUYkhJJZLIAAIxBMoUFozVrqyU7sgOsa5kKk0QZy5CRtbWsJasDww31VRpa0ZbTkhZXQZToP61sV6Ueqa3gqJixFSepwjjRQDVQIWPzrj0AAFhUfvazn2n58uXKZrPatGmTtm3bplWrVh3z+Y1GQ41GY/Tx0NDQXJSJecSvhdrTV1F/OVCUpLIMaaAWyK9FWt9ZHPf8gWqg7rasur2Rj2WtWUmGWrOOvLytepRouB7KNKUev6YoSXR2d6vWdhblWqYsa2ShRa9f197+ijYs9+jHAQCnPAJaLBiVIFYjjPXylZ5qYaIgTLS8Pae+4YYGq5GKmVg7D5Y1UAlUbkSyZKg152hJa0brlhRVDWIN1SPZpqHutqxWlQrMnAUAAIvGBRdcoDvvvFMve9nL1NPTo1tuuUWvfe1rtWPHDrW0tEz4mm3btumWW26Z40oxX/i1UDv2+ao0IrXnXbm2qSBK5NdD7f/FjNkVbTk5lnnMRQ5LWzJa1ZHXzw9WdKjS0FA1VJSmiuNEB8uB8q6l5e05lQqujCOWzrbnXfUNB6oEMXe0AQBOefwmxIIRxYmG6qH6KomGa5GidOQd/lRS1jFkGtL+oboqtUjL23Ja1pbTkoKrjGMq65ha11lU3rVkW6YKrsU79QAAYFHZsmXL6J/POeccXXDBBVq9erW+8pWv6N3vfveEr7n55pt10003jT4eGhrSypUrZ71WNF+aptrTV1GlEanby40ezzqW1neOBPqpkl+ME9MxFzkYhqH2gqv9O/s0WA3V7WXlubb6yg29MFDTstaMWrLOmHBWkhzLVJSkiuJkbr5gAADmMQJaLBjVINbzfVUFcSIv7yiIYvVVAh0YqisIY5WDWEmSak1nUas7clrRlteSYkaGYajHr6mv0lC3xy1UAADg1NDW1qaXvvSleu655475nEwmo0wmM4dVYb6oBLH6f7Gp10RWtOVVroc6a7mnjG0ec5FDmqYaqARa1prR0paM/GoovxbK0MjeEDnX1HA91NKWzJiQNowT2aYh25p4MzIAAE4lBLRYENI01e6DZb04VNNgJVQjTjRYDRQn+sUmBrHiOFWXl1WaJhqsRjJUV861VczY3EIFAABOOeVyWTt37tRv/dZvNbsUzENRnChKUrn2xAGpY5mKUyljm2o7Rogr/TLoXdGWV8Y2VQtjxUkq05BeHKypx6/Lr4SqtcXKO7/sww/Psi244zciAwDgVMPblVgQfrp/WN/+ca8ODTf0wkBFz/UOabDSUKUR6lC5ocFqqP5qqDSVDpQbqoexqkGkXr+mNE25hQoAACx673//+7V9+3bt3r1bP/jBD/SWt7xFlmXp7W9/e7NLwzxkW6Zs01AQTdwfh3Eiy5Aa0cjCiHIjUpqm4543Jug1pMOLZA3TUFdbTsWso4Plhir1SHGSqh7G6vFrbNgLAMARWEqIec+vBnro2QPqGawqjBJVwmRkk7B6ojBO5dqGOgoZWVaiMEkUxal2H6po42lt8quhamEs0zC4hQoAACxqL7zwgt7+9rerr69PnZ2des1rXqMf/vCH6uzsbHZpmIcKrqVS0VWvXx8zg/awfYNVpUr19Iv+6AzaUtHV6o6xM2gPB739lUAD1WB0kzDbMNSad7Sk4CpJUjXiRIfKDTbsBQBgAgS0mNfSNNUzvcPqGaipFqbqHarLMk21ZG3Vwlh+LZRSQ414ZHRBLUi0rNXRYLWhgVpDS4oZxUkqvxFyCxUAAFjUvvSlLzW7BCwghmFodUdBw/VIPX5N7XlXjmUqjBPtG6xq/1BDy1qzKmYcubapIErU69c1XI+0YYU3Gq4WXEsZx9L/t6tPeddSS9YZvU5fuaFqEOv8NSVtPM1TnKRs2AsAwARYToh5KU1TlRuRXhys6dneIfUM1XRouD5ya1ScqNyIVAtj2aapKE40VItkGoYs09BgNZBjWxquhqoFsQ6VG9xCBQAAABzFyznasMJTl5dVpRHpULmhcj1UqlTLWrNa31lU1rFkGoayjqVuL6dKI9Le/sqYcQepRv6cpsbhA2MeG6ZUzNhqy7sqZmx6cgAAjsIKWsw7fi3U7kNlvejXtW+gqh/u7NO+gaos05Brm6oGkYIoURDFyjimwsSQ0lSNINHSVkuObSpjGRqoRDqtZGjNkrxWdxS5hQoAAAA4ipdztHGFp0oQK4oTNaJET7/oq5iZuHc+evPdShArCBO9/LQ2DVQD+dVQ5TSSbRjqbHHVni+qESRs1gsAwCT4DYl5xa+FevTnfdp9qKI0SfVc37D2DdY0WBvZAMw0RjYsyLqWgihRI05lpFLWstSIYtXqkdYsz8uxbDm2qUvP7tL6ziLv0gMAAADHYBjGaHg6WA0UJxrZ9GsCR2++e3iTsM6WjEoFV7UwVpykskxDOcdSkkqHyg026wUAYBIEtJgXkiTRgeGGfrizXz9+0deSoqPUMDRci1VwbVWCSNVGLEOSZRhqRLFsy1A9TOTYhqIkkWFachxLrTlXhYytDad5hLMAAADACTi86VcQJco64/dvCONkzOa7Rz8/7479L2YYxWzWCwDAcRDQoumeH6jq33f1aeeBsn70gq80SbVqSV6GDEVxotUdeaVK9UJYVT1MlHMsxVEqGYayjql8xlbONrW6I691nUUta81qZSmvs7o9wlkAAAAsCmmajo4hmM2NtgqupVLRVa9fV7eXG3d+oBqM2Xz3RJ8PAADGI6DFnDvcXIZRrN19FT30zEGVG7Fas5aylqFcztG+gbqq9Uhe3pFtmlrRVlClEen5vqoi01R7wVaSpMo4lopZR6W8I9e2VQtjre3M68zuNmbOAgAAYFHwa6H29FXUXw4UJals01Cp6Gp1R2HGe17DMLS6o6DheqQev6b2vCvHMhXGiQaqwbjNd0/0+QAAYDwCWsyZNE3V49e161BZvX5dh4br+n97BzVUi3T6shYNNVLFkjKurZJl6NBwXUbdkGVKpmmq4NpyXEOWmSpNTSVKtLQlp40rWtXZmtVAJVAx6+isbk+thLMAAABYBPxaqB37fFUa0Uj4aRvya6F2HijrwHBD569ul5d3Z/RzejlHG1Z440Lh7rasVpXGh8In+nwAADAWAS3mhF8L9fSLQ/qPvQMaKDdUbsSqR5EGa6Hyjim/2pBhGhqoBDo4HCjrmgrjVIfKdVWDkQ2/jFRaVsiqmLE1FMRqsR29YpWn5W15lRuROluzas05StJmf7UAAADAyUvTVHv6Kqo0InV7OZUbkZ4/WNVQNVSUpvr5oYqGa6Fed8ZStc1CSLtxhTflsQon+nwAAPBLBLSYdX4t1FMvDOrH+3w1gkhRkqi/2lC5HunAcEOdRVcHK4EaYayDw4HqYay8a8m1pCCWLMOUaRhKlaol56qj6CofxrIMqRokqoexlrRk1JZzZUhsQAAAAIBFoRLE6i8Has+7Kjci7TxYVi2I1JJ15FimXMvUzw9V1LJ7QOevLTV9paphGCpm+C8mAAAnit+emDVpmqrciPTjfb52HizrULkhvxpq56GKEqXKWJbieGTsQbkRqRbEMg1DpiHVw0T1MFWsVPnYVt4wtbw1p84WV8ONWGuWFNSed5WkqdZ2FlUq/GJjAjYgAAAAwCIRxYmiJJVjG3r+YFW1INKSYnb0fMG1FeQSDddD7e2vaMPymdskdy7n3gIAcKojoMWsONzQ7Ruo6UfPD+jAcEOD1VCGIVWDSK5laKAea6gRqtaIZBmGklTK2oYs01RiSNVGJNOQHCVqdR3lM7aWtOTUko+Vd2y1ZB1VgkhJkqrXr7MBAQAAABYV2zJlmyMzZ4eqoVqyY4PRMElkG4Y6Chn1DQeqBPGMrGA9eu6ta5sKokS9fl3D9UgbVniEtAAAzCACWsy4Ixs61zIURIlsy1AQJzowXFcSp9IvNvkKo1RBLBlK5dhSkiZKE0syJNc2ZaSGXNfWEi+jFW15bTzNU861tN+v68BwQ9VGpEac6LT2HBsQAAAAYFEpuJZKRVc7D5QVpamco0Z5DdUidba4asna6qsEiuLkpD/n0XNvD8s6lrq9nHr82oyv1gUA4FQ3r4d1fuQjH5FhGGM+zjjjjGaXhUkc2dB1tWYVxKmG6pHyji3XMlStRYqSVLUokSFTlinZpmRIimKpFqaK4kR5x1RnMaOsa2m4HulQOZBpSsWMrZaMo/WdRXV7WV2wvqTXnL5EG5bzLj4AAAAWF8MwtLqjoJacI78WqtIYuXusEcU6ONxQ3rXU5eVGRxDMxF4MR869nUh73h1drQsAAGbGvF9Be/bZZ+s73/nO6GPbnvcln9ION3SuZeq5A8Pafaiqg8N17fdHGklZhmphrGLGURAlStJUhqSMLYWpZBlSZ2tWedeS0lRhlMqyTQ1WRzYRc0xD9TDWQDVQRzGjs5d74271AgAAABYLL+fo/NXtGqoF2nWoqiA3Mtags8VVl5dTMWOrx6+d1F4MaZqqEsSK4kSVRqQwTuTaE4e9jmUqStIZWa0LAABGzPu007ZtdXV1Tfn5jUZDjUZj9PHQ0NBslIVjiOJEQ/VQPX5dvUM1hWEiwzQ0WAnVV2n8IpRNVAtMxUksGZJlGrJtU0kUK+NYMtORFbX1KJVhGMraplaVcrJM6UW/rmLGVndblpEGAAAAOCV4eVevP2OZHts9oOF6qI5CRi1ZW1GSqsevndReDEdvBhbGiXr9mmzL1JJiZtzzwziZsdW6AABgxLz/rfqzn/1My5cv17p163TNNddo7969kz5/27Zt8jxv9GPlypVzVCkkyTSknQfKerrHVxilav3/27vzIDmr+97/n2ftdbpnlWZGy0hiEchacMDIJLHjGC4Y30sZ2xUTnPIPE4IrNqSCKRJfkjKEVBwSO4uJQ8VV9s9ZKsZbEjtl13WICwNJbMAGX8wSECAEQtKMNJqlp/dnO/ePYcYaaSS0d6vn/aoaM9PdT8+3Tx95vs+3z/M9GU99uZQcS/OXY8WxkZGR59rK+a7Svq04TpQkkmSpmSQqNUJVZpvT6uyBvN6zZYXOHy5q08qiLlrbS0sDAAAALCndWV9vWdurs5bllRijiWow2ye2O33cm3bN7R0xt+HuQFdKfTlfYWL01K5pVZrRIcdM1QL1dfnHvVoXAAAcyjLGmFYHcTjf/e53ValUtH79eo2Ojuquu+7S7t279cwzz6irq2vRYxZbQbtq1SqVSiUVCoXTFfqSVKqHem5PSX/7gx2aroUa6s4o49mqNmPtKTU0UW5ovNpU1nc1XEirFsYq1UNJs5dVRXEi27ZkW5Zs21JPxtemVd36HxuWqzvjq9qMdNHa3pOyMy0AADg+MzMzKhaL5FYdive3/R3YjsB1bOV857hWzhpj9PTrxdkDNwOTpEoz0o92TCjjO7pgVbd8x1EYJ5qqBcql3OMuCAMAsJQcS17V1pWuK6+8cv77zZs3a+vWrRoZGdHXv/513XDDDYsek0qllEodeikOTq25T993TlTlOZb6cp7K9UCTVaNaM1RiJFlGOd9RHBu5rq2iYyvrO2pGibrTrupRomaUqJjx5DqWzhss6J3rl6kr459wXy0AAACgE1iWdVIWLBxpM7B8ytWWld3asb+qiWogz7bl2hZtxgAAOEXaukB7sO7ubp177rl66aWXWh0KDmCM0asTVVWbkfJpV0FsFMVGk9VA0/VA09VAtiwVMo56simVG5GiMJbjzn7in/Fc9eR8XbQsJ2MkGamQ8WTbUpTohPtqAQAAAEvZYqtuozhRlJjDbgbWnfW1sifRhuGCcin3hFbrAgCAIzujCrSVSkXbt2/Xhz70oVaHsmQdmNw59mxyNlMPtXu6rrRra+dkQ80w1mQ1VBDFqjQjNYJExpKMZakSNJXxHBnbVpRInuco5djq6/K0eUW38mlPo6W6pquBJquhZhqhRvqzfFIPAAAAHIeDNwFzbUu9eV/9+ZRc21IQJUp7h16lFsaJPMdWMevTYgwAgFOsrf/S3nbbbbrqqqs0MjKiPXv26M4775TjOLr22mtbHdqSdGByN9MINVEJJBn5nqO903XZtqUgjGUk7Z1pKIgSSVIm5aoaRAqiWLZlqZBx1Z12VQlimcRoqCet1T1ZFbKesp6rs5flNVULtKwe6i1re7WsK8Un9QAAAMAxmmtDVm1G6sn68l1bQZRorNTQTD2U79maqgWH9KCVZjcDo8UYAACnR1sXaHft2qVrr71WExMTGhgY0C/+4i/q0Ucf1cDAQKtDW3IOTO58x9Z0PVQtmN3VNUqMYiPt2FdRPYxVqoXyXEthZOQ6thphImOkREY5z1FsjBIZubYUJEahSdSd95V5/ZN7S5aaYaKR/hzFWQAAAOA4HNiG7MACbNpzNFTMaLRUV1faU9Z3NFqqqyfry3PsBZuB0WIMAIDTo60LtF/96ldbHQK0MLkbLKS1fbyiRpBouDsrSRov1xWbRNUgVj2KFMSJutKebMuSMVKYGOUsR7ItuY6tMJbKjUi9uZTSnqVqM1Hac5UkUhjHJIQAAADACTrSJmCS1JP1VW1GOnewS/srzQUtENgMDACA06utC7RoDwcmd3MrZAuZn02dQsbXdC1SlBjZxlIziuW7jjKeoyBOlE05yrquYpMo5zuqh4l8x1JP1tP5w11qBEZJYrS/0iQhBAAAAE6CN9oEzHNsRYlR1ne0aUXxkE3EWCgBAMDpQ4EWb+jA5K7ajBSZ2U/WG2GsODGSjCzLqDfnqVwPZNu2GmEs33HkOrZ8x1FiEvmOo0zKVVfGUW/W1aaV3Tp/qEu1INaG4aJSrk1CCAAAAJwErmO/4SZg7utXuFmWxUZgAAC0EH+FcVjGGFWDWNVmpDBO1AxjObalMEq0Y39F5UaoyWqoUj2cXSnrO0oSKec7imNLlm3L1mz/2sQYZX1bSSJ5nrSqL6v1y7tUqkca6k7TaxYAAABLylyufaKrVg/3PDnfUW/e11ipcdhNwAaLKRljNF0LWCgBAEALUaDFokr1UK9OVDVZCRTGicZKdb02VdPavpzGK009NzajcjXU/mpT9SCSbVsqZHzlfEfFrK8kSVQLEkUmUS7lqNyI1IxidWdcrRvIa9OKbpWbEb1mAQAAsOQcmGvP9X3tzfsa6Tu2Nl9v9DwjfTmVG9Gim4BJUqUZ64lXpk4oBgAAcOIo0OIQpXqoZ3aXVG1G6sn68l9vPfDkzkl956k92l9uaPdUXeV6pCiO5TiWHMfWVK2pMHY1WEgp46dVyDiKYqPpeiBjpN6cr+HunNb055TzXfV1+fSaBQAAwJKyWK4dRInGSg2VG5E2rigeVX58tM+zcUXxkCJuV9pTuRGq0jixGAAAwMlBgRYLGGP06kRV1Wa04FKotOeokPG0fV9ZY6W6GpEUJ4kc25bvOrNFXNtWHCeKjeS7loyR3npWv3qyvoa70xruzsiyLMWJ4RIqAAAALDnGGL2yv6KJSlP9+ZQSY2RpNtceKmY0Wqpr52RVG4eLR8yTj5SzH/w8xYy3YBMwx7b08nhF5Ybe8FhydQAATg8KtFigGsSarATqyfrzt1WakV7aV9bOiZqaYaIokfK+rUYkea+vrnXs2T5X5WakUj3Qm1d3qx4k2rSiqHOWd5HcAQAAYMkbLTX0k1enFcSJ9pWbci1LxaynwWJG+ZSrnqyviXKgahAfcdOuxXL2Ax38PAduAlZpRpqqhkd9LAAAOPX4i4sFojhRGM/2ji03Etm2pe37ynp5X1mjpYYqQaQoMZJtybZni662JRlJQWzkO5aakVGYGKV9R7nXE0IAAABgqTlwA69aEOupXVPaX2lqRU9GKddRGCcaLweqNmOdtSyvjOcoSoyiODni80Zxoigx8l170fs9xz7s85zIsQAA4NSgQIsFakGsXVM1heNGli1N1gK9OFZW1nNkWUYZ19G0CdUIE0WxkWUbGUlZz1EjSpT2bHmOVGvEGulLq0DvKgAAACxBB2+6u2uqrkoQKpd2ZVuWbMtSynU00OVovNzUWKmuFd0ZubYl11m8eDrHdWy5tqUgSpT2nEPuD+PksM9zIscCAIBTg7+6mFeqh3p5vKIwMSo3ZzcN2L6vol3TdY2Wm5qshTIycixLJjFybSmJE9WbkcrNSFGSyMhS2nWV9mytH+7isigAAAAsOXMbeI2VGsqlXOXTroI4kWUszdRDjZebCx5fyLgq1UKNzTTU1+Ur5x9aOD1QznfUm/c1VQsWvX+qFhz2eU7kWAAAcGpQoIWkn200UAtirevPq9KM9cr+qowx6s/6ipJEe6cbchxHQ8W0ZFkKE6PYGEWJUb0ZqRbGcmQ00p/VBat7tGGIjQUAAACwtBy8gVfac2SM5NiWhrozyvmOamGk8XJDzShWnBglxmi80lTKdbS6N/eGObRlWRrpyymXcjVaqqsRzj5PI4w1Wqorl3IP+zwnciwAADg1WN7Y4Q7se+U6tnK+s2iyVQ1iTVSa8l1LuybryqVsWZavyb2BmkmiKErkupbSrq1C1lMQxSrVEiWWpZRjybIt+balkf6cLn/ToC5e268i7Q0AAACwxCy2gZdjW3ItS2GcaKArralqoK60q0YQKzKRkthooMvXppXFo86hixlPG1cU59soRImRa1sa6k5rdW/uiM9zIscCAICTjwJtBzuw79Vc0tWb9zXSd2jSNVkN9NJ4RVGU6MV9FVWbsarNUJP1UI5lKYiNolhKZWyVqqF6c2llU65qQazujKdCxtdgV0rnryhqeSGtQpqpBQAAgKVnsU24Mp6jYtbTeDlQb86X59pa3ZeV69iKY6P9labW9Gdnr1Q7BsWMp00rike1IONkHgsAAE4uqmgdaq7vVbUZqSfry3dtBVGisVJD5UakjSt+9ul8qR7qhbGyZuqRHGv253I9VJgYpWxbnuvIsWNVm5HqYaJGFCnt+sqnPa3uzWtdf1bFbEop19K6ZXlNVkJVg5j+swAAAFhyFtuEy7IsDRYzqjZj7Z2py7Pt2Y3CZKnUDNWXT2mkL39cxVHLso477z6RYwEAwMlDD9oOtFjfK9uylPYcDRUzqjYj7ZysKkkSlRuhntk9rWoz1JrejMYrDZXrkSzbUm8uJd+1lZjZnVx7c54sJepKuVrVn9Wbhot669penbO8IMeWunO+CmlPUWIUxUmrhwEAAAA47Q63CVc+5eqsZXl5ri3fs1RpRLP5end6weIJAACw9PBxaQdarO/VgXqyvnbur6nWjDVZC/Tfu2dkZCRjtHuqoana7K6yzTBRIikIY/XmfRUynvZM1hUrUU/G17r+LnmupYlqUxnf1WAhoyiebaXgOtT+AQAAsPTMbcJVbkQaLdXVk/XlObbCeHZxxIahgtYN5JX1HdoKAAAASRRoO9Jifa8O1IwSvTxeVRAnCpJEr0xUNFMPNVZqaqLSUCKjlOcqSowyniPLkrKerZ6cr6znyHEsubalZhwrTiz1d6U0WMgo//pOsEPdaeV85zS/agAAAKA9nMgmXEe7yS8AAOgcFGg70GJ9r+YYY7RrqqYgSeQ5lh5/dVr7ZhqyLMl3Z1e+xkks17KUcmaPzfquIiM5ks5ZltfKnoxSnqswTmZX1qY9RbHRaKmuXMrV6t4cSSQAAACWpLkCqzFGa/tzWtufU5yYoyq2HssmvwAAoHNQoO1Ac32vxkoNDRUzC+6rh7F2T9c1VEzppfGKGs1YxayvPdN1RfFsQbcRSkli5HmzK2W7s67W9ec1Uw/lOLbOGezSSG9Or07WNFkJNFEJjnpFAAAAAHA6nc4VqUcqsL7RZlzHsskvAADoLBRoO9CR+l7tma7LcywVMp6efm1ajTjWjvGKJqqBGuHsylljSZ5ja+9MUyO9GTm2rVIjVDNKtKI7o5G+vIoZT5syHpdfAQAAoG2dzhWpJ1JgPXiT3zlzm/yOluraOVnVxuEi+TYAAB2IAm2HOlzfq+GetDzX1vhMQ0/vntHeckPVRizHllxLshwpSSxFcSxJMsZSLUjUl7N03lCXtq7rm08sLct6w5UAAAAAQCuczhWpJ1pgPZpNfifKgapBTP4NAEAH4q97BytmPG1aUVQ1iBVGsZpRojCK9eyuGX37p7v0ykRFYWwkM1tsNZLsWCpmXBljZFuWRvqzWtmd1XBPWucPFTRUTLf6ZQEAAABHdLpXpJ5ogfWNNvn1HFtRYhTFyQnHCgAA2g8F2g5nWZbixOi5sbKe3zOjl/bO6Acv79e+mUDB68VZx5HCxMiWFMuoGcbyXVuua6naiOS6llZ0ZzXSl+eSKgAAALS9070i9UQLrEfa5FeSwjiRa89u6AsAADoPf+E7XKke6rGXJ/SfL+zT07un9ZPXShovz7Y8MLP1Wb3ezUCJmf1vLYxl2ZJtWYqNdN5gUZtWdrMpAQAAAM4Ip3tF6oEF1sW8UYF1bpPfqVqw6P1TtUB9Xb5y/qHFWwAAcOajQNvBjDF6ZX9FP31tSi+PV7Vjf03j5bqixMixJdua/XJsSUaybckkkoxRfy6lVT0ZXbKuT29d10txFgAAAGeMEy2YHqsTLbDObfKbS7kaLdXVCGPFiVEjjDVaqiuXcrW6N8fVbAAAdChaHHSwahDrhdEZPT82o3ItUiOMZ1fNGilKXl89a2Y3B/McS75jy01Zci1LhbSndf15Xbimm40IAAAAcEaZK5iOlRoLetDOmaoFGupOn7QVqXMF1nIj0miprp6sL8+xFcaJpmrBURVYD7fJ71B3Wqt7cyyYAACgg1F560DGGFWDWK+Ml/WDl/frlfGabEsarzTVCGKFieRotvesiaUkme09G5hYMo4cV8qmHG1Z3aM1/V18Ug8AAIAzyskomB6rk1FgPXCT3yhO5Dq2cr5DPg4AQIejQNthSvVQr05UtXOypsd3TOqpXSVN10L5nq0oSZRotq+FkRQnkiXJsmZX1TYjyVKstf1dumrzCr1t/TI+qQcAAMAZqRUrUk9GgdWyLK5gAwBgieEvfwcp1UM9vWtaE5VAu6dqmqg2ZNmSLClJjGzLkmXN9p81yeymYJYk15Ecy5Jk6axlOf3G29bp3ZuHZNu0KAYAAMCZqxUrUimwAgCAY0XmcIYzxqjSjFSqBfrJzmm9OlGVa1t6cte0qkEs33ZUyEgz9UhGs5uCyUixJVlm9jl811Y25ag/6+sta/q0eXUPxVkAAAB0BAqmAACg3ZGptLm5frKLfeJfqod6dk9J20bLem2yqudGy0p7tvpyaVWDWHnf1qSklOOomLE0UUlkyZJtG8lIji35jqvBYloDXWmt7Elrw4qCenOp1r5oAAAAAAAAYImgQNvG5vrJHtgzqzfva6QvJ0l67OUJPTc6I8e2ZNmSbUuNMNKzoyVVmqEG8in5jqOmiZXzbVl5X7UgVhDHihOpJ+NpeTGjjSsKyvqe8mlH5yzLn7TdbAEAAAAAAAAcGQXaNlWqh3pmd0nVZqSerC/ftRVEicZKDc3UQ1mWtGN/RbZlKePZerUWqhHGCmOjJEnUDGNNVJvy3dliq2vZ6s76KmSkyVpTKdvROcuyGu7LqZjylEha25/XSF+eXWIBAAAAAACA04QCbRsyxujViaqqzUhDxcz87WnP0VAxox37K3p5vKLJalNJIjWiWC/uq6jcCOU5jvJpV1Fs1IwTyUiNOFYYJVo/2KW87ypfduQ4lnzflStLXRlX6weL2jBcOCW72QIAAAAAAABYHAXaNlQNYk1WAvVk/UXvty3p2T0lNeNYhZSvRhBpshooSYxs2WpGRumULSey5Nm2mtFsD1sZI9ux9ObVPXrz6h4Nd6fVlfZUyHjKp1xWzgIAAGDJOdKeDwAAAKcDBdo2FMWJosTId+1D7jPGaKzU0FQ1VMZ35LuOLEtyHVuxlSg2iaLYkm1J2ZSnvO/IdW15jnTxuj6dP1TQmv68hoppEk8AAAAsaUfa84ErywAAwOlCgbYNuY4t17YURInS3sINu2pBpF3TdXVlXKU9R2GcyLZspV1bSWKpESaqh5GWd6U03JNRzndlWZJj23rbuct0zjJ6zAIAAABH2vOh3Ii0cUWRIi0AADgtDl2iiZbL+Y56876masEh91WbscbLTZ3Vn9dgIaMwTlQLQvmuLduSHMdSM0zkuq6KaV/Li2n15lJa259l1SwAAACgQ/d8SHuObMua3/Oh2oy0c7IqY0yrQwUAAEsAK2jbkGVZGunLqdyINFqqqyfry3NshXGifeWGPMfWcE9WKddW2ne0Z6omzw5UiWfbInSl0nrzqqIGCmkFYaK6ibV+sKh8ircbAAAAeKM9H3qyvibKgapBTA4NAABOObKNNlXMeNq4onhIT6y1A1lN1gLVg0g92azOWZbXqp6MpmpdenV/Tbuna8r4jtKeoyBIJFs6f6igDcMFVs8CAAAAOvKeD5LkObaixMxutAsAAHCKUaBtY8WMp00rigt2lc16thJj6cc7JjVebqqQcZVyHPXlUopjyXakoUJGq3qySvmOVnSnNdKXp38WAAAA8Loj7fkgSWGcyLUtuQ4d4QAAwKlHgbbNWZa14LIqY4zW9OW0t1TX7um6SnUjS5KRlPFt/fK5y7RpZbeyviPXsZXzHVbOAgAAAAeY2/NhrNTQUDFzyP1TtUBD3Wnl/EOLtwAAACcbBdo2YIyZXyXr2LPF1DgxCwqsxhiNlhrasb+imXok27KU9VwFcax8xldv1teKHlbLAgAAAG/kSHs+TNUC5VKuVvfmWOgAAABOCwq0LVaqh/N9ZqcboaYqTUmW+vK+ulKuMilHXWlPe0sN/ffojOpBrELGU3/e19r+nMrNSCnX0aaVRQ0V0ySRAAAAwFE43J4PQ91pre7NsegBAACcNhRoW6hUD/XM7pKqzUieY2umHqoWxJKk5vTsf/eU6irVAsmSulK+1g92yXNsTVRC1YNEZy3Lq9wINVFtaqiYbuXLAQAAAFrKGKNKM9JMPZQkFTKe8in3sIsYFtvzgRZhAADgdKNA2yLGGL06UVW1GWmwmNZL+ypqhrGGu7OaqDb1+I5JRUkiz7E1WQvkObbSrqM9pYZWdmc00JXSeLmpsVJdK7ozmigHqgbxgn61AAAAwFIxXQv0xKtT2jZaVrkZyrMt9eR8nTdU1IbhwmFXxB685wMAAMDpRibSItUg1mQlUE/WVz2MNVML1ZX2VA0iPT86o0YYK+O7si2pJ+tprNRUPYxVrgea8GxlfEeFjKtSLdRgIa0oMYripNUvCwAAADjtXpuq6btPj+q/98xIml0Zm085mqwG+tGOCZUbobau66NtAQAAaEt2qwNYqqI4UZQY+a6tODaKzGzPq7Hpukr1UP1dKYVxokaYyHccpVxL9WasMDYq10M1o1iebSsyRvUwlmtbch3eTgAAACwtpVqgB5/fqxfGysqnXK3ty6mQ9lQLE0WJZFvSKxNVvTpRkTGm1eECAAAcghW0LeI6tlzbUhAlsm1LUZxo5/6Kntkzo/3lhsZnbMkycm1HtcBWFM0WcZtRrGbkKE6kUIlcy1KlGWntQE4532n1ywIAAABOG2OMnh8ra/dUQ/n0z/rNeo6lnoyvqXog15Z829bu6YbWDdASDAAAtB+ykxbJ+Y56875eHq+q0gz1ny+O69k9JVWasZJEsiTlU5ZWFDNyPVe5tKswMhovN5XxXFmSJipN+a6t3pyv1b05NjMAAADAklINYo2XG0q5tsI4kesszIfzvqt6GMv3EjXDhJZgAACgLVGgbRHLstST9fTS3hk9uG1c2/eV1YgXPqbSNHp1sqZlxYyWdaWUJEaVZizLMto9VVc+5WrjyqI2DBXppwUAAIAlJ4oTGUkZz9FMI1IUG/kHFGmd169YSyIp5dm0BAMAAG2JAm2LTNcCPbRtn3740ri2jZUVHdQOy5ZkJDVjqdoIZYxRLUyUTbnaMFTUWQN5jfTnNFRMs3IWAAAAS5Lr2MqnXBWznvZVmqo2I/lZf/7+OJltEWa70oruNC3BAABAW6JA2wKleqj/eGFcD2/bp52TNUVmtiBrSZq76MqxpcTMbmpQCWLtrzS0cVW31vV36ZfPW6bh7gyFWQAAACwJxhhVg1hRnMh1bOV8R5ZlKec76sunNF0L1Zfz9cr+qupBpN58Spak3dM1ZX1H5y7r0khfnvwZAAC0JQq0p5kxRq/sr+i50ZJem2qo3Jzta2BJsizJNnOPm71NliQj9eRSumRNn/JpX8WsT3IJAACAJaFUD/XqRFUT5aaqwWzu3N/l67zBgrqzvnpyvirNSDP1UK4jTVWb2lduynUsDRZSevu5y/WWtb20BAMAAG2LAu1pVmlGevq1af33npLGK3XFr/edNfP/o9ertZL1+gralGdpdW9WiSz1dflcmgUAAIAlYboW6PFXprR3pq4oNoqSRM3IaNvesl7cW9GFa3o0VQ3VlXa1biCvahBqph6pVAvV15XS5ecv07mDBRY3AACAtkaB9jQq1UM9+tK4vvPMqHbsq6je/NmuYIkk5/XVsjKzK2hlSVEsZXOu+nO+enO+VvfmSDABAADQ8Uq1QN9/fq+eHy2r2owVJYkGulIaLGTU+3o7gz3TNa1fXtBZy7pkjFE9jBUnRo5taboWKEjMG/8iAACAFqNAe4oc3CcrimL927Nj+v5ze7VjX3V2swJ7doWsZWbrsvEB+aOl2SJt2pHeNFTUW9b2a8OKIpdmAQAAoOOV6qF+/OqUdoxXZVmWPMdSby6tShBp93Rdq3oyGiqm9fjOKQ0VszIysixLWf9npze2ZWmiHKgaxMqnOO0BAADti0zlFJjrkzVZCRQlRo0g0o9fmdB/vLRf09VA1WY8W5G1ZvvOupIi87MOB9Ls9xlH+uXzl+m3L1uvc5d3sXIWAAAAHc8Yo1cnqirXQ2V8V/VqU/m0J8+x1ZPxNVUPNFEJVMi4ci1L5Uagehgr6y08tfEcW1FiFMXJYX4TAABAe6BAe5KV6qGe2V1StRmpJ+urGUb615/s0QPP7VMtlmzNFl/n2xlYs6tofUnm9dW0sqSBQkpXbxnSb7z9bHXnUq18SQAAAMApc/CVZ3Eca/t4RWEUa7La1Ew9kO86MmZ2lWzedzXTCJXyLKU9W0FsFMdGOuhCszBO5NqWXMduzQsDAAA4ShRoT6K5T/urzUhDxYz2TFV17/ef11Oj9fnHzH1+H5nZYq1jSXEiObZUyLgqpDz1FVJ6/5tX6MpNwypm/Za8FgAAAOBUO/jKs8lqQ8+PzWj7vqokaarWVLWRaEVvQ8sLGfXnUkp5jhJjVA9i9eV9JcbIcQ690myqFmioO80GuwAAoO1RoD2JqkGsyUqgnqyvZ/dM69P/5xlNNg7/+ESSbaSMb0my1ZdPaU1vTm8/b4DiLAAAADrawVee7S7V9P1t49o1WVOlGSvv27JsS9Ug0vOjZU1VQ/Xn0xrsTitJjIa7M8r4s8Xa6WogO2fJc2yFcaKpWqBcymWDXQAAcEagQHsSRXGiKDHaX67p7u88o1JwFMcYKYmN0ilLa/uyunLTkH5p/TKKswAAAOhYB195Vq4H+s8XZvdrWF7IKJysqhYmSrmO+rvSmqo2VWmGihOj6Xqgi0aK6s35WlZIa3VfVlPVYH4VrmtbGupOa3Vvjg12AQDAGYEC7UnkOrb2lqr66weeO6ri7JxIUm/O0//aPKy3rV9OIgkAAICOduCVZ0ZG28ZmNDpdV3fGU7kZK+M7atQiee5s/9iBLl+N0CifdpUkUj7l6axlOY305VXMeFrZnVnQxzbnO6ycBQAAZwwKtCfRYy+P657vPa99tWM7LuvZunLjkK7cNCTHoUcWAAAAOlsUJwrjRGEca8dERY/vnNR0LVCUJCo3IiWJUdazlHIshbEUxEaeY+mc5V3K+a5W9OS0tj+vrvTswgbLspRPcWoDAADOTGQxJ8mjL+3T//7GkxqvmWM6zpL0pqEu/a8tKyjOAgAAYEmoNiM9u6ekXVM17ZpqaH+loWaUyLElI0v1MJbv2sr5rhzHVqku5VOuRnqych1bKc9WnBxb3g0AANCuKNCeBM/smtLHv/p/NV5LjvnY1d2e/r9fWKtzl3edgsgAAACA9vLaVE3/5+k9+r87pzRRCeZbEoRxov3lQHnfVZwY2ZKaUaKcYyuMjZYVUjKSsmlH+ZQr17Fb/VIAAABOCgq0J2jnZFWf/u5zGq1Ex3xsb1q68e1n661nLaNHFgAAADredC3Qg8/t1YtjVfXl0goTKYkT1SIp5bqKk0jTjVCeYylObM00Q03XA/XkPPXnU8qlPaVdV/1dKeV8rj4DAACdgQLtCUiSRA8/v1fPjpWP+diUpNuu2KD/ecFKNgUDAABAxzPG6PmxGe2ebiifduU6lupRrCRJ5AaxmmGslGsr5VmyLVtJnGii0tRwd0ZvWlHU6r6s0q6rga6UVvfmWOAAAAA6xhlRoL333nv1mc98RmNjY9qyZYs+97nP6eKLL251WBqvBPrvPWVF8bH1v8q70l998M365fOHSCwBAACwJFSDWPvLgXzHVhAnStmW0q4tz3VVzErFtKdSPZBjW0p7jnqznmJjaeNwl3ryKeVTsytnV/fmWOAAAAA6Sts3bvra176mW2+9VXfeead+8pOfaMuWLbriiiu0b9++VoemRhirHkVynaMvsp6/LK3//4ateueGYYqzAAAAOOnuvfderVmzRul0Wlu3btWPfvSjVockSYri2f0asilbxkiWbSnrO6oHsTzbViHjqZjxtawrpfOHCnrzSK9+7a2r9N4LV+lt5wzoLWv7tHG4SHEWAAB0nLYv0P7FX/yFbrzxRl1//fXasGGDPv/5zyubzepLX/pSq0NT2nNUTPnK+Y7co6i1vnfjgL58489r69r+Ux8cAAAAlpx2XtwwtxlYd8aXZWZX1BazvlKuo5lGqCBK1IxiOY6trO9ouDujNf1d6kp76s76yqdcFjgAAICO1NYF2iAI9MQTT+iyyy6bv822bV122WV65JFHFj2m2WxqZmZmwdepMpD3tXFlQT3ZlLrSjg63TYEl6aqNA7rzvVvU25U5ZfEAAABgaWvnxQ0531FfV0oZ39FwT0aNIFa5HqqYdZX2bO0u1RXEiQbyKW1a1a1NK7tZLQsAAJaEtu5Bu3//fsVxrOXLly+4ffny5Xr++ecXPebuu+/WXXfddTrCk23beuvZA3purKxKI1JiGqo1EkWS5rrSpmzp0g3L9Lv/803qzqVOS1wAAABYeuYWN9x+++3ztx3N4oZmszn/86lc3GBZlkb6cio3IkmSa3dp11RNpVqoehBrTV9Wl6zr01vW9mmomGa1LAAAWDLaukB7PG6//Xbdeuut8z/PzMxo1apVp+z3rerJ6vpfXKeerK+Hnt+n3dNV1cPZPlorujP61bes0pVbVqo765+yGAAAAIB2X9wgScWMp40rinp1wtVEuqn+vK9mlKgn5+m8wYKGuzMUZgEAwJLT1gXa/v5+OY6jvXv3Lrh97969GhwcXPSYVCqlVOr0rlRd1ZPVTb98tt7/cyu0fV9FlSDSYCGtdQN5FTI+SSYAAADa0ule3CDNFmk3rSiqGsSK4mS+Ny05MwAAWKraukDr+74uvPBCPfDAA7r66qslSUmS6IEHHtDNN9/c2uAOYtu2hntyGu7JtToUAAAALEFnyuIGabbdQT7V1qciAAAAp01bbxImSbfeequ+8IUv6O///u/13HPP6aMf/aiq1aquv/76VocGAAAAtI0DFzfMmVvccMkll7QwMgAAABxJ239sfc0112h8fFx33HGHxsbGdMEFF+jf/u3fDumtBQAAACx1t956q6677jpddNFFuvjii/XZz36WxQ0AAABtru0LtJJ08803t11LAwAAAKDdsLgBAADgzHNGFGgBAAAAHB0WNwAAAJxZ2r4HLQAAAAAAAAB0Kgq0AAAAAAAAANAiFGgBAAAAAAAAoEUo0AIAAAAAAABAi1CgBQAAAAAAAIAWoUALAAAAAAAAAC1CgRYAAAAAAAAAWoQCLQAAAAAAAAC0CAVaAAAAAAAAAGgRCrQAAAAAAAAA0CIUaAEAAAAAAACgRSjQAgAAAAAAAECLUKAFAAAAAAAAgBZxWx3AqWaMkSTNzMy0OBIAAIAz31xONZdjobOQOwMAAJwcx5I3d3yBtlwuS5JWrVrV4kgAAAA6R7lcVrFYbHUYOMnInQEAAE6uo8mbLdPhyx+SJNGePXvU1dUly7JO2e+ZmZnRqlWr9Nprr6lQKJyy39NpGLfjw7gdH8bt+DBux4dxOz6M2/E5neNmjFG5XNbw8LBsm25ZneZU5c782+48vKedh/e08/CedhbezzPPseTNHb+C1rZtrVy58rT9vkKhwD+U48C4HR/G7fgwbseHcTs+jNvxYdyOz+kaN1bOdq5TnTvzb7vz8J52Ht7TzsN72ll4P88sR5s3s+wBAAAAAAAAAFqEAi0AAAAAAAAAtAgF2pMklUrpzjvvVCqVanUoZxTG7fgwbseHcTs+jNvxYdyOD+N2fBg3tDvmaOfhPe08vKedh/e0s/B+draO3yQMAAAAAAAAANoVK2gBAAAAAAAAoEUo0AIAAAAAAABAi1CgBQAAAAAAAIAWoUALAAAAAAAAAC1CgfYkuPfee7VmzRql02lt3bpVP/rRj1odUlv7gz/4A1mWteDrvPPOa3VYbec//uM/dNVVV2l4eFiWZelb3/rWgvuNMbrjjjs0NDSkTCajyy67TC+++GJrgm0jbzRuH/7whw+Zf+9617taE2wbufvuu/WWt7xFXV1dWrZsma6++mpt27ZtwWMajYZuuukm9fX1KZ/P6/3vf7/27t3boojbw9GM2zve8Y5D5txv/uZvtiji9vA3f/M32rx5swqFggqFgi655BJ997vfnb+fuba4Nxo35hraGfly5yCXP7NxjtF5OP/pPJybLU0UaE/Q1772Nd16662688479ZOf/ERbtmzRFVdcoX379rU6tLb2pje9SaOjo/Nf//Vf/9XqkNpOtVrVli1bdO+99y56/6c//Wn91V/9lT7/+c/rscceUy6X0xVXXKFGo3GaI20vbzRukvSud71rwfz7yle+chojbE8PP/ywbrrpJj366KP63ve+pzAMdfnll6tarc4/5uMf/7i+/e1v6xvf+IYefvhh7dmzR+973/taGHXrHc24SdKNN964YM59+tOfblHE7WHlypX6kz/5Ez3xxBN6/PHH9c53vlPvec979Oyzz0pirh3OG42bxFxDeyJf7jzk8mcuzjE6D+c/nYdzsyXK4IRcfPHF5qabbpr/OY5jMzw8bO6+++4WRtXe7rzzTrNly5ZWh3FGkWS++c1vzv+cJIkZHBw0n/nMZ+Zvm56eNqlUynzlK19pQYTt6eBxM8aY6667zrznPe9pSTxnkn379hlJ5uGHHzbGzM4vz/PMN77xjfnHPPfcc0aSeeSRR1oVZts5eNyMMeaXfumXzG//9m+3LqgzRE9Pj/niF7/IXDtGc+NmDHMN7Yt8ubOQy3cOzjE6D+c/nYlzs6WBFbQnIAgCPfHEE7rsssvmb7NtW5dddpkeeeSRFkbW/l588UUNDw9r3bp1+rVf+zXt3Lmz1SGdUXbs2KGxsbEFc69YLGrr1q3MvaPw0EMPadmyZVq/fr0++tGPamJiotUhtZ1SqSRJ6u3tlSQ98cQTCsNwwZw777zztHr1aubcAQ4etzlf/vKX1d/fr40bN+r2229XrVZrRXhtKY5jffWrX1W1WtUll1zCXDtKB4/bHOYa2g35cmcil+9MnGN0Ls5/zmycmy0NbqsDOJPt379fcRxr+fLlC25fvny5nn/++RZF1f62bt2qv/u7v9P69es1Ojqqu+66S29729v0zDPPqKurq9XhnRHGxsYkadG5N3cfFveud71L73vf+7R27Vpt375dv/d7v6crr7xSjzzyiBzHaXV4bSFJEt1yyy36hV/4BW3cuFHS7JzzfV/d3d0LHsuc+5nFxk2SPvjBD2pkZETDw8N66qmn9IlPfELbtm3Tv/zLv7Qw2tZ7+umndckll6jRaCifz+ub3/ymNmzYoCeffJK5dgSHGzeJuYb2RL7cecjlOxfnGJ2J858zG+dmSwcFWpx2V1555fz3mzdv1tatWzUyMqKvf/3ruuGGG1oYGZaCX/3VX53/ftOmTdq8ebPOOussPfTQQ7r00ktbGFn7uOmmm/TMM8/QT+4YHW7cPvKRj8x/v2nTJg0NDenSSy/V9u3bddZZZ53uMNvG+vXr9eSTT6pUKumf/umfdN111+nhhx9udVht73DjtmHDBuYagNOCXB44s3D+c2bj3GzpoMXBCejv75fjOIfslLd3714NDg62KKozT3d3t84991y99NJLrQ7ljDE3v5h7J27dunXq7+9n/r3u5ptv1ne+8x09+OCDWrly5fztg4ODCoJA09PTCx7PnJt1uHFbzNatWyVpyc853/d19tln68ILL9Tdd9+tLVu26J577mGuvYHDjdtimGtoB+TLnY9cvnNwjrE0cP5z5uDcbGmhQHsCfN/XhRdeqAceeGD+tiRJ9MADDyzoB4cjq1Qq2r59u4aGhlodyhlj7dq1GhwcXDD3ZmZm9NhjjzH3jtGuXbs0MTGx5OefMUY333yzvvnNb+r73/++1q5du+D+Cy+8UJ7nLZhz27Zt086dO5f0nHujcVvMk08+KUlLfs4dLEkSNZtN5toxmhu3xTDX0A7IlzsfuXzn4BxjaeD8p/1xbrY00eLgBN1666267rrrdNFFF+niiy/WZz/7WVWrVV1//fWtDq1t3Xbbbbrqqqs0MjKiPXv26M4775TjOLr22mtbHVpbqVQqCz7V3LFjh5588kn19vZq9erVuuWWW/RHf/RHOuecc7R27Vp98pOf1PDwsK6++urWBd0GjjRuvb29uuuuu/T+979fg4OD2r59u373d39XZ599tq644ooWRt16N910k+677z7967/+q7q6uuZ7FxWLRWUyGRWLRd1www269dZb1dvbq0KhoN/6rd/SJZdcore+9a0tjr513mjctm/frvvuu0/vfve71dfXp6eeekof//jH9fa3v12bN29ucfStc/vtt+vKK6/U6tWrVS6Xdd999+mhhx7S/fffz1w7giONG3MN7Yx8ubOQy5/ZOMfoPJz/dB7OzZYogxP2uc99zqxevdr4vm8uvvhi8+ijj7Y6pLZ2zTXXmKGhIeP7vlmxYoW55pprzEsvvdTqsNrOgw8+aCQd8nXd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",
      "text/plain": [
       "<Figure size 1700x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(17,7))\n",
    "y_pre=rf.predict(x_train)\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(y_train,y_pre,alpha=0.2);\n",
    "plt.xlabel(\"target\");\n",
    "plt.ylabel(\"predictions\");\n",
    "plt.title(\"training time\");\n",
    "\n",
    "#plotting test error \n",
    "\n",
    "y_pre=rf.predict(x_test)\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(y_test,y_pre,alpha=0.2);\n",
    "plt.xlabel(\"target\");\n",
    "plt.ylabel(\"predictions\");\n",
    "plt.title(\"training time\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b4381bf-9c00-4f83-9556-acdd19112d86",
   "metadata": {},
   "source": [
    "# checking accuracy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "de528145-c72a-42ed-a6e6-e44c8cdf361d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(98.88246944490314, 95.89376437699909)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.score(x_train,y_train)*100,rf.score(x_test,y_test)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bd30244-2079-45f8-b9de-1166969d9dff",
   "metadata": {},
   "source": [
    "# also checking the accuracy of another models (knn and svr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "015580f1-d5de-4ed3-a5f1-f8642299a30a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(96.12304118851486, 88.15680664908744)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kr= KNeighborsRegressor(n_neighbors=3)\n",
    "kr.fit(x_train,y_train)\n",
    "kr.score(x_train,y_train)*100,kr.score(x_test,y_test)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "30708b36-bc68-430d-afa7-bc4d0083cc9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(62.11106028630685, 72.00267687944117)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sv=SVR()\n",
    "sv.fit(x_train,y_train)\n",
    "sv.score(x_train,y_train)*100,sv.score(x_test,y_test)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4726ac5-3fed-412d-997f-22aa2c4b9263",
   "metadata": {},
   "source": [
    "# cross validation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "17ca983d-0b2b-4260-a7de-8e9425bcad7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          0\n",
      "0  0.964382\n",
      "1  0.785434\n",
      "2 -1.261163\n",
      "3  0.954396\n",
      "4  0.701013\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "rf = RandomForestRegressor()\n",
    "rf_acc = cross_val_score(rf, x, y, cv=5)\n",
    "print (pd.DataFrame(rf_acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "41537edb-4a56-4682-882f-05db8fa7655b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean 0.4288123503452508\n",
      "STD 0.8509242718519819\n"
     ]
    }
   ],
   "source": [
    "print ('Mean', rf_acc.mean())\n",
    "print ('STD',rf_acc.std())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11a6d23d-ae64-46e4-b797-6dba9a068f59",
   "metadata": {},
   "source": [
    "# creating the pickle to save our model so that we can use it later "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "2859dc7a-1cb5-4df0-a792-f1e157734c99",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "7a361711-8b4e-482d-a6db-7191c7829790",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('classifier.pkl','wb') as file:\n",
    "    pickle.dump(rf, file)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64172b90-4f57-484c-ba32-07ffcc4dee07",
   "metadata": {},
   "source": [
    "# load pickle and do the prediction "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "31aa7cb1-00fd-40cb-bf69-3b08f90a39fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('classifier.pkl','rb') as file:\n",
    "    clf=pickle.load(file)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae91d5c2-e302-4590-af5e-d76e69d505b1",
   "metadata": {},
   "source": [
    "model=pickle.load(open('classifier.pkl','rb'))\n",
    "p_pre=model.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "9361e579-a49f-489c-af53-81a610bca2d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicting=clf.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "a7dfb2b2-ea22-46c4-9369-5d15e140fd2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3.693 ,  5.107 ,  7.7509,  2.72  ,  4.515 ,  8.613 ,  6.6275,\n",
       "        6.507 ,  7.387 ,  7.091 ,  2.795 ,  7.0095,  7.3444,  5.919 ,\n",
       "        2.4075,  7.639 ,  7.2195,  7.639 ,  3.3115,  2.7054,  2.784 ,\n",
       "        5.0155,  3.0735,  2.55  ,  2.737 ,  2.9575,  3.5175,  5.6675,\n",
       "        2.1525,  7.3765,  3.1315,  2.507 ,  5.0585,  5.8205,  5.711 ,\n",
       "        3.1545,  4.5995,  0.6885,  2.96  ,  2.2979,  5.8295,  2.607 ,\n",
       "        2.0714,  5.6565,  1.566 ,  6.3402,  2.829 ,  1.495 ,  5.82  ,\n",
       "        7.6135, 15.22  , 22.259 , 15.4406, 15.672 ,  2.8088,  4.147 ,\n",
       "        4.509 ,  5.4585,  4.094 , 22.9615,  6.9445,  4.9015, 21.069 ,\n",
       "       24.395 , 28.74  ,  4.558 , 15.2247,  8.7719,  4.6934, 14.3767,\n",
       "        4.088 ,  4.806 ,  7.096 ,  2.792 ,  5.1965,  4.173 ,  5.652 ,\n",
       "        2.0219,  5.6485, 15.388 , 13.5951,  5.1775, 22.3473, 11.3604,\n",
       "        3.9135,  3.6784, 29.8295,  5.9855,  3.5475,  4.036 ,  4.596 ,\n",
       "        9.563 ,  4.198 , 22.259 ,  4.539 ,  5.805 , 20.6242, 15.8627,\n",
       "        7.0105,  8.9062,  1.6285,  1.6005,  1.578 ,  1.5065,  1.4255,\n",
       "        1.2677,  2.4371,  1.1732,  1.1683,  1.2063,  1.17  ,  1.1597,\n",
       "        1.1815,  1.1498,  1.1426,  1.129 ,  1.0908,  1.1283,  1.1317,\n",
       "        1.0865,  0.9671,  1.0575,  0.7749,  1.0422,  1.0326,  0.9575,\n",
       "        0.851 ,  0.6951,  0.7715,  0.7354,  0.7038,  0.6866,  0.773 ,\n",
       "        0.7658,  0.6678,  0.5524,  0.6999,  0.4642,  0.6049,  0.6062,\n",
       "        0.7176,  0.6061,  0.5872,  0.5791,  0.4946,  0.5536,  0.5509,\n",
       "        0.5662,  0.49  ,  0.5396,  0.4951,  0.4364,  0.4956,  0.5079,\n",
       "        0.5401,  0.4652,  0.4662,  0.5365,  0.476 ,  0.4588,  0.4674,\n",
       "        0.478 ,  0.4901,  0.4657,  0.4504,  0.443 ,  0.447 ,  0.4732,\n",
       "        0.3712,  0.4158,  0.5075,  0.4134,  0.396 ,  0.4191,  0.3784,\n",
       "        0.3354,  0.4766,  0.3748,  0.3397,  0.3829,  0.2603,  0.3299,\n",
       "        0.2634,  0.2672,  0.2322,  0.2875,  0.2363,  0.2672,  0.2685,\n",
       "        0.1815,  0.1882,  0.2132,  0.2035,  0.2275,  0.3185,  0.2427,\n",
       "        0.1725,  0.1941,  0.1676,  0.1566,  0.1531,  2.5074,  4.5895,\n",
       "        2.8205,  2.897 ,  4.9505,  5.673 ,  4.7965,  7.4435,  4.796 ,\n",
       "        3.041 , 11.4766, 11.635 ,  2.9015,  4.8475,  4.7565,  3.093 ,\n",
       "        3.1205,  6.096 ,  4.7565,  3.5015,  3.906 ,  5.6475,  6.635 ,\n",
       "        5.266 ,  2.937 ,  4.6255,  2.4765,  5.0225,  3.2065,  5.9625,\n",
       "        9.0225, 11.5315,  3.6795,  4.9275,  8.9595,  3.102 , 10.7231,\n",
       "        5.3915,  2.4115,  5.1565,  4.5615,  4.5415,  5.951 ,  5.845 ,\n",
       "        5.0965,  3.172 ,  6.601 ,  3.567 ,  5.475 , 11.7573,  5.2675,\n",
       "        5.3165,  5.7815,  5.352 ,  2.912 ,  9.8907,  8.561 ,  8.6332,\n",
       "        3.903 ,  9.5185,  5.266 ,  4.0305,  5.7135,  4.0655,  7.0325,\n",
       "        3.8665,  7.9508,  4.89  ,  7.1588,  4.027 ,  3.2785,  7.3025,\n",
       "        2.4579,  5.0335, 10.4685,  8.7207,  9.4285,  6.3755,  6.532 ,\n",
       "        5.1885,  2.3189,  6.817 ,  8.8197,  3.818 ,  6.645 ,  5.699 ,\n",
       "        5.24  ,  8.544 , 10.1102,  4.525 ,  5.1625,  6.5665,  3.4885,\n",
       "        4.0175,  9.0239,  8.5328,  4.13  ,  3.274 , 10.6208,  5.222 ])"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicting\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b48cb96c-7e72-4ab8-8515-929e05d5d1fc",
   "metadata": {},
   "source": [
    "# display the final result "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "4c881601-0bee-4b04-8ba7-ef57999559d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Driven_kms</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Selling_type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Price Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.6930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>93</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>5.1070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68</td>\n",
       "      <td>2017</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>7.7509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.85</td>\n",
       "      <td>2.7200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>92</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.60</td>\n",
       "      <td>4.5150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>8.5328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>66</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.1300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>69</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.2740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>69</td>\n",
       "      <td>2017</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.50</td>\n",
       "      <td>10.6208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>66</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.2220</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Present_Price  Driven_kms  Fuel_Type  Selling_type  \\\n",
       "0          90  2014           5.59       27000          2             0   \n",
       "1          93  2013           9.54       43000          1             0   \n",
       "2          68  2017           9.85        6900          2             0   \n",
       "3          96  2011           4.15        5200          2             0   \n",
       "4          92  2014           6.87       42450          1             0   \n",
       "..        ...   ...            ...         ...        ...           ...   \n",
       "296        69  2016          11.60       33988          1             0   \n",
       "297        66  2015           5.90       60000          2             0   \n",
       "298        69  2009          11.00       87934          2             0   \n",
       "299        69  2017          12.50        9000          1             0   \n",
       "300        66  2016           5.90        5464          2             0   \n",
       "\n",
       "     Transmission  Owner  Selling_Price  Price Prediction  \n",
       "0               1      0           3.35            3.6930  \n",
       "1               1      0           4.75            5.1070  \n",
       "2               1      0           7.25            7.7509  \n",
       "3               1      0           2.85            2.7200  \n",
       "4               1      0           4.60            4.5150  \n",
       "..            ...    ...            ...               ...  \n",
       "296             1      0           9.50            8.5328  \n",
       "297             1      0           4.00            4.1300  \n",
       "298             1      0           3.35            3.2740  \n",
       "299             1      0          11.50           10.6208  \n",
       "300             1      0           5.30            5.2220  \n",
       "\n",
       "[301 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "result = pd.concat([dff,pd.DataFrame(predicting ,columns = ['Price Prediction'])],axis=1)\n",
    "display( result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "d9cbf8e4-762c-47c5-bd6d-dd3159c8ac82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score  0.983139586883049\n",
      "Mean Absolute Error 0.30188471760797314\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score,mean_absolute_error\n",
    "print  ('R2 Score ', r2_score(y, predicting))\n",
    "print  ('Mean Absolute Error', mean_absolute_error(y,predicting))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39e1a158-5834-46bb-b4de-ede4c6168104",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
